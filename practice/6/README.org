* 第 6 章 C 控制语句: 循环

** 再探 while 循环
   伪代码: pseudocode

** while 语句
   格式:
   #+begin_src c
     while (expression)
         statement
   #+end_src
   statement 可以是分号结尾的 *简单语句*, 也可以是用花括号括起来的 *复合语句*
   expression 为非 0, 跳出执行

*** 语法要点
    诸如 ~while (n++ < 3);~ 结尾为单独一个分号被视为一条语句 - 空语句(null
    statement)
    有时使用带空语句的 while 语句跳过第一个非空白字符或数字:
    #+begin_src c
      while (scanf("%d", &num) == 1)
          ;//跳过整数输入
    #+end_src
    只要 scanf()读取一个整数, 就会返回 1, 循环继续执行.
    *建议* 该分号单独占一行

** 用关系运算符和表达式比较大小
*** 其他真值
    非 0 即为真

*** 新的 _Bool 类型
    ~stdbool.h~ 头文件:
    让 bool 成为_Bool 的别名, 而且还把 true 和 false 分别定义为 1 和 0 符号常量. 包含该头文
    件后, 写出的代码可以与 C++兼容, 因为 C++把 bool, true 和 false 定义为关键字

*** 优先级和关系运算符
    关系运算符的优先级比算术运算符(包括+和-)低, 比赋值运算符高
    关系运算符优先级表
    | 优先级组 | 符号         |
    |----------+--------------|
    | 高       | <, <=, >, >= |
    | 低       | ==, !=       |

** for 循环
   小结: for 语句
   关键字: for
   一般注解:
   for 语句使用 3 个表达式控制循环过程, 分别用分号隔开, initialize 表达式在执行 for 语
   句之前只执行一次, 然后对 test 表达式求值, 如果表达式为真(或非 0), 执行循环一次,
   接着对 update 表达式求值, 并再次检查 test 表达式
   for 语句是一种 *入口条件循环*, 即在循环之前就决定了是否执行循环
   
   形式:
   #+begin_src c
     for (initialize; test; update)
         statement
   #+end_src

** 逗号运算符
   性质: 
   1. 保证了被它分隔的表达式从左往求值(逗号是一个序列点, 所以逗号左侧项的所有副
      作用都在程序执行逗号右侧项之前发生)
   
** 出口条件循环: do while
   小结: do while 语句
   关键字: do while
   一般注解:
   do while 语句差 UN 构建一个循环, 在 expression 为假或 0 之前重复执行循环体中
   的内容.
   do while 语句是一种 *出口条件循环*, 即在执行完循环体后才根据测试条件决定是否
   再次执行循环. 因此, 该循环体至少必须执行一次
   statement 语句可是一条简单语句或符合语句
   形式:
   #+begin_src c
     do
         statement
     while (expression);
   #+end_src
   
** 数组简介
   数组(array)是按顺序储存的一系列类型相同的值, 通过整数下标访问数组中单独的项或
   元素(element)

   用于识别数组元素的数字被称为下标(subscript), 索引(indice) 或 偏移量(offset)

** 使用函数返回值的循环示例
   如何把函数的返回值返回给主调函数?
   编写一个有返回值的函数
   步骤:
   1. 定义函数时, 确定函数的返回类型
   2. 使用关键字 return 表明待返回的值

** 关键概念
   创建循环时, *特别注意* 以下方面
   1. 注意循环的测试条件要能使循环结束
   2. 确保循环测试中的值在首次使用之前已初始化
   3. 确保循环在每次迭代都更新测试的值

      
   C 通过求值来处理测试条件, 结果为 0 表示假, 非 0 表示真. 带关系运算符的表达式常用语
   循环测试没它们有些特殊. 如果关系表达式为真, 其值为 1; 如果为假, 其值为 0. 这与
   新类型 _Bool 的值保持一致

   数组由相邻的内存位置组成, 只储存相同类型的数据. 记住, 数组元素的编号从 0 开始,
   所以数组最后一个元素的下标一定比元素数目少 1.
      
   使用函数涉及 3 个步步骤:
   1. 通过函数原型声明函数;
   2. 在程序中通过函数调用使用函数
   3. 定义函数

** 本章小结
   while 语句和 for 语句提供了 *入口条件循环*
   for 语句特别适用于需要初始化和更新的循环
   使用逗号运算符可以在 for 循环中初始化和更新多个变量.
   do while 提供了 *出口条件循环*
** 复习题(res 目录)
   1. 见 ~res1.c~
   2. 见 ~res2.c~
   3. a: ~>5~
      b: ~scanf("%lf", &doubleVal) == 0~
      c: ~x == val~
   4. a: ~scanf("%d", intVal) != 0~
      b: ~x != val~
      c: ~x >= 20~
   5. 见 ~res3.c~
   6. 见 ~res4.c~
   7. a: 见 ~res5.c~
      b: 见 ~res6.c~
   8. a: 见 ~res7.c~
      b: 见 ~res8.c~
      c: 见 ~res9.c~
      d:\ 见 ~res10.c~
   9. 见 ~res11.c~
   10. a: mint
       b: 10
       c: double
       d:\ ii
   11. 见 ~res12.c~
   12. - long 类型开头定义;
       - return 值 long 类型;
   13. 见 ~res13.c~
   14. 见 ~res14.c~


** 编程练习(practice 目录)
   1. 见 ~practice1.c~
   2. 见 ~practice2.c~
   3. 见 ~practice3.c~
   4. 见 ~practice4.c~
   5. 见 ~practice5.c~
   6. 见 ~practice6.c~
   7. 见 ~practice7.c~
   8. 见 ~practice8.c~
   9. 见 ~practice8.c~
   10. 见 ~practice9.c~
   11. 见 ~practice10.c~
   12. 见 ~practice11.c~
   13. 见 ~practice12.c~
   14. 见 ~practice13.c~
   15. 见 ~practice14.c~
   16. 见 ~practice15.c~
   17. 见 ~practice16.c~
   18. 见 ~practice17.c~
       
