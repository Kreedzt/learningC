* 第 7 章
** if else 语句
   if 和 else 之间只允许有一条语句(简单语句或复合语句)

*** getchar()和 putchar()
    getchar() 函数不带任何参数, 它从输入队列中返回下一个字符
    例:
    #+begin_src c
      ch = getchar();
      // 上下等同
      scanf("%c", &ch);

      putchar(ch);
      // 上下等同
      printf("%c", ch);
    #+end_src
    
    ctype.h 头文件中的字符测试函数
    | 函数名     | 如果是下列参数时, 返回值为真                                                         |
    |------------+--------------------------------------------------------------------------------------|
    | isalnum()  | 字母数字(字母或数字)                                                                 |
    | isalpha()  | 字母                                                                                 |
    | isblank()  | 标准的空白字符(空格, 水平制表符或换行符) 或任何其他本地化指定为空白的字符            |
    | iscntrl()  | 控制字符, 如 Ctrl+B                                                                   |
    | isdigit()  | 数字                                                                                 |
    | isgraph()  | 除空格之外的任意可打印字符                                                           |
    | islower()  | 小写字母                                                                             |
    | isprint()  | 可打印字符                                                                           |
    | ispunct()  | 标点符号(除空格或字母数字字符以外的任何可打印字符)                                   |
    | isspace()  | 空白字符(空格, 换行符, 换页符, 回车符, 垂直制表符, 水平制表符或其他本地化定义的字符) |
    | isupper()  | 大写字母                                                                             |
    | isxdigit() | 十六进制数字符                                                                       |
    
    ctypte.h 头文件中的字符映射函数
    | 函数名    | 行为                                                       |
    |-----------+------------------------------------------------------------|
    | tolower() | 如果参数是大写字符, 该函数返回小写字符; 否则, 返回原始参数 |
    | toupper() | 如果参数是小写字符, 该函数返回大写字符; 否则, 返回原始参数                          |

*** 多重选择 else if
    C99 标准要求编译器至少支持 127 层嵌套(if else)

*** else 与 if 配对
    如果没有花括号, else 与最近的 if 匹配
    否则, 以最近的花括号 if 匹配
    #+begin_src text
      if (条件)
         语句
      if (条件) # else与该if匹配
         语句
      else
        语句

      ---

      if (条件) # else与内含if语句的第一个if语句匹配
      {
        语句
        if (条件)
           语句
      }
      else
        语句
    #+end_src
    
*** 多层嵌套的 if 语句
    小结: 用 if 语句进行选择
    关键字: if, else
    一般注解:
    下面各形式中, statement 可以是一条简单语句或复合语句. 表达式为真说明其值是非 0
    值
    1. 形式 1:
       #+begin_src c
         if (expression)
             statement
       #+end_src
       如果 expression 为真, 则执行 statement 部分
    
    2. 形式 2:
       #+begin_src c
         if (expression)
             statement1
         else
             statement2
       #+end_src
       如果 expression 为真, 执行 statement1 部分; 否则, 执行 statement2 部分

    3. 形式 3
       #+begin_src c
         if (expression1)
             statement1
         else if (expression2)
             statement2
         else
             statement3
       #+end_src
       如果 expression1 为真, 执行 statement1 部分; 如果 expression2 为真, 执行
       statement2 部分; 否则, 执行 statement3 部分

** 逻辑运算符
   3 种逻辑运算符
   | 逻辑运算符 | 含义 |
   |------------+------|
   | &&         | 与   |
   | \        | 或   |
   | \!         | 非   |

*** 备选拼写: iso646.h 头文件
    C 是在美国用标准美式键盘开发的语言. 
    C99 标准新增了可代替逻辑运算符的拼写(在 iso646.h 头文件中)

    如果程序中包含该头文件, 可用 ~and~ 代替 ~&&~, ~or~ 代替 ~||~ , ~not~ 代替 ~!~

*** 优先级
    - ~!~ 运算符的优先级比乘法运算符还高, 与递增运算符的优先级相同, 只比圆括号的
      优先级低
    - ~&&~ 运算符的优先级比 ~||~ 运算符高, 但是两者的优先级逗比关系运算符低, 比
      赋值运算符高

*** 求值顺序
    除了两个运算符共享一个运算对象的情况外, C 通常不保证先对复杂表达式中哪部分求
    值

    C 保证逻辑表达式是求值顺序是 *从左往右*, 所以程序在从一个运算符对象执行到下一
    个运算对象之前, 所以的副作用都会生效. 而且, C 保证一旦发现某个元素让整个表达
    式无效, 便立即停止求值

    #+begin_src c
      while (x++ < 10 && x + y < 20)
    #+end_src
    ~&&~ 是一个序列点, 这保证了在对 ~&&~ 右侧的表达式求值之前, 已经递增了 x

    小结: 逻辑运算符和表达式
    逻辑运算符: 逻辑运算符的运算对象通常是关系表达式, ~!~ 运算符只需要一个运算对象, 其他 2 个逻辑运算符都需要 2 个运算对象, 左侧一个, 右侧一个

    求值顺序: 逻辑表达式的求值顺序是 *从左往右*. 一旦发现有使整个表达式为假的因
    素, 立刻停止求值

*** 范围
    ~&&~ 运算符可用于测试范围:
    例:
    #+begin_src c
      if (range >= 90 && range <= 100)
    #+end_src

** 条件运算符
   C 语言提供条件表达式(conditional expression)作为表达 if else 语句的一种边界方式,
   该表示使用 ~?:~ 条件运算符. 

   该运算符分为 2 部分, 需要 3 个运算对象. 因为需要 3 个运算对象, 所以该运算符称为三元
   运算符

   条件运算符是 C 语言中唯一的三元运算符

   小结: 条件运算符
   条件运算符: ?:
   一般注解:
   条件运算符需要 3 个运算对象, 每一个运算对象都是一个表达式

** 多重选择: switch 和 break
*** 多重标签
    小结: 待多重选择的 switch 语句
    关键字: switch
    一般注解:
    程序根据 expression 的值跳转到相应的 case 标签处. 然后, 执行剩下的所有语句, 除非
    执行到 ~break~ 语句进行重定向. expression 和 case 标签都必须是整数值(包括 char 类型),
    标签必须是常量或完全由常量组成的表达式.

    如果没有 ~case~ 标签与 expression 的值相匹配, 控制则跳转至标有 ~default~ 的语句;
    否则将跳转至执行紧跟在 ~switch~ 语句后面的语句
    形式:
    #+begin_src c
      switch (expression) {
          case label1: statement1 // 使用break跳出switch
          case label2: statement2
          default: statement3
      }
    #+end_src

** goto 语句
   早起版本的 ~BASIC~ 和 ~FORTRAN~ 所依赖的 ~goto~ 语句, 在 C 中仍然可用. 但是 C
   和其他两种语言不通, 没有 goto 语句的 C 程序也能运行良好. 
   goto 语句 *易被滥用*, 并建议 *谨慎使用, 或者根本不用*;

   goto 语句有 2 部分: goto 和标签名. 标签的命名遵循变量命名规则, 如下所示:
   #+begin_src c
     goto part2;

     part2: printf("Refined analysis:\n");
   #+end_src

   C 程序员可以接受一种 goto 用法 -- 出现问题时从一组数组嵌套循环中跳出(一条
   ~break~ 语句只能跳出当前循环):
   #+begin_src c
     while (funct > 0) {
         for (i = 1; i <= 100; i++) {
             for (j = 1; j <= 50; i++) {
                 // 其他语句
                 if (problem)
                     goto help;
                 // 其他语句
             }
             // 其他语句
         }
         // 其他语句
      }
     // 其他语句
     help: 语句
   #+end_src

   小结: 程序跳转
   关键字: ~break~, ~continue~, ~goto~
   一般注解:
   这 3 种语句都能使程序流从程序的一处跳转至另一处
   - break 语句:
     所有的循环和 switch 语句都可以使用 break 语句. 它使程序控制跳出当前循环或 switch
     语句的剩余部分, 并继续执行跟在循环或 switch 后面的语句
     示例:
     #+begin_src c
       switch(number) {
        case 4:printf("That's a good choice.\n");
            break;
        case 5:printf("That's fair choice.\n");
            break;
        default:printf("That's a poor choice.\n");
       }
     #+end_src
   
   - continue 语句:
     所有的循环都可以使用 continue 语句, 但是 switch 语句不行. continue 语句使程序控
     制跳出循环的剩余部分
     对于 while 或 for 循环, 程序执行到 continue 语句后会开始下一轮迭代. 对于 do
     while 循环,对出口条件求值后, 如有必要会进入下一轮迭代
     示例:
     #+begin_src c
       while ((ch = getchar()) != '\n') {
           if(ch == ' ')
               continue;
           putchar(ch);
           chcount++;
        }
     #+end_src

   - goto 语句:
     goto 语句使程序控制跳转至相应标签语句. 冒号用于分隔标签和比标签语句. 标签名
     遵循变量命名规则. 标签语句可以出现在 goto 的前面或后面
     形式:
     goto label;
     label: statement;

** 关键概念   
   如果要测试 2 个条件, 应该使用逻辑运算符把 2 个完整的测试表达式组合起来

** 本章小结
   测试条件通常通常是关系表达式, 即用一个关系运算符(如, < 或 ==)的表达式
   使用 C 的逻辑运算符, 可以把关系表达式组合成更复杂的测试条件

   在多数情况下, 用条件运算符 (?:) 写出的表达式比 if else 等语句更简洁

   ctype.h 系列的的字符函数(如. issapce()和 isalpha())为创建以分类字符为基础的测
   试表达式提供了更便捷的工具
** 复习题
   1. a: false
      b: true
      c: false
   2. a: ~number >= 90 && number < 100>~
      b: ~ch != 'q' && ch != 'k'~
      c: ~number >=1 && number <= 9 && number != 5~
      d:\ ~number > 9 || number < 1~
   3. 见 ~res1.c~
   4. a: true
      b: true
      c: true
      d:\ 6
      e: 10
      f: false
   5. 见 ~res2.c~
   6. 见 ~res3.c~
   7. 见 ~res4.c~
   8. 见 ~retire.c~ (死循环)
   9. 见 ~res5.c~
   10. 见 ~res6.c~
