* 高级数据表示
  本章介绍以下内容

  - 函数: 进一步学习 ~malloc()~
  - 使用 C 表示不同类型的数据
  - 新的算法, 从概念上增强开发程序的成立
  - 抽象数据类型(ADT)
    
    本章重点介绍如何把项目看作一个整体.

    从程序设计的关键部分开始, 即数据表示方式. 程序开发最重要的部分是 *找到程序中
    表示数据的好方法*, 正确地表示数据可以更容易地编写程序其余部分. 到目前为止,
    应该熟悉的内置类型: 简单变量, 数组, 指针, 结构和联合

    找出正确的数据不仅仅是一种数据类型, 还要必须考虑进行哪些操作. 必须确定 *如何
    存储数据*, 并且为数据类型 *定义有效的操作*.
    
    eg: C 实现通常把 int 类型和指针类型都储存为整数, 但是这两种类型的有效操作不
    相同. 
    eg: 两个整数可以相乘, 但是 *指针不能相乘*; 可以用 ~*~ 运算符解引用指针, 但是
    对整数这样做毫无意义. C 语言为它的基本类型都定义了有效的操作. 但是, 当要涉及
    数据表示的方案时, 可能需要自己定义有效操作.

    C 语言中, 可以把所需的操作设计成 C 函数来表示. 
    简而言之, 设计一种数据类型包括设计如何储存该数据类型和设计一系列管理该数据的函数

    本章还会介绍一些算法, 即 *操控数据* 的方法. 应该掌握这些可以反复解决类似问题
    的处理方法.

    本章将进一步研究设计数据类型的过程, 这是一个把算法和数据表示相匹配的过程. 期
    间会用到一些常见的数据形式, 如队列, 列表和二叉树.

    本章还将介绍 *抽象数据类型(ADT)* 的概念. 抽象数据类型以面向问题而不是面向语
    言的方式, 把解决问题的方法和数据表示结合起来. 设计一个 ADT 后, 可以在不同的
    环境中复用. 理解 ADT 可以为将来学习面向对象程序设计(OOP) 以及 C++ 语言做好准
    备
    
    
  
