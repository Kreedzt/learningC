* 第三章

** 高级printf
   - %u -- 用于打印unsigned int
   - %o -- 以八进制打印int
   - %x -- 以十六进制打印int
   - %#o -- 以八进制打印int, 并补全前缀0
   - %#x -- 以十六进制打印int, 并补全前缀0x(x小写)
   - %#X -- 以十六进制打印int, 并补全前缀0X(X大写)

   - %ld -- 用于打印 long
   - %lx -- 以十六进制格式打印long
   - %lo -- 以八进制打印long
   - %lu -- 标识打印unsinged long

   - %%lld -- long long
   - %%llu -- unsinged long long

   - %hd -- short(十进制)
   - %ho -- 以八进制打印short

   - %a -- 以十六进制打印浮点数

   - *注意*:
     1. int类型被认为是计算机处理整数类型时的最高效类型, 所以在给函数传递参数时,
        C编译器把short类型的值自动转换成int类型的值
     2. 使用h修饰符可以显示交大整数倍阶段成short类型值得情况
     3. 
   
** char字符类型
   1. 定义
      1) C语言把1字节定义为char类型占位的位(bit)数, 因此无论16/32位都可以使用char类型
      2) 本质是整数类型: ASCⅡ码('A' 对应 65)
      3) 标准ASCⅡ码范围: 0 ~ 127, 只需7位二进制数即可标识
      4) 超过ASCⅡ码: Unicode编码
      5) 两种赋值:
         #+begin_src c
           char grade = 'A';
           char grade = 65; // 依旧有效, 不建议操作
         #+end_src
   2. 字符常量和初始化
      1) C语言将字符常量视为int类型而非char类型
         举例:
         #+begin_src c
           char grade = 'B';
           char fate = 'FATE'; // 把4个独立的8位ASCⅡ码存储在一个32位存储单一中
           grade = fate; // 只有最后8位有效
         #+end_src
      2) 非打印字符
         代表行为字符(退格, 换行, 终端响铃或轰鸣)打印方式
         1. 使用ASCⅡ码
            #+begin_src c
              char beep = 7;
            #+end_src
         2. 使用特殊的符号序列(转义序列)
            #+begin_src c
              char netf = '\n';
            #+end_src

** 转义序号
   | 转义序列 | 含义                                                         |
   |----------+--------------------------------------------------------------|
   | \a       | 警报(ANSI C)                                                 |
   | \b       | 退格                                                         |
   | \f       | 换页                                                         |
   | \n       | 换行                                                         |
   | \r       | 回车                                                         |
   | \t       | 水平制表符                                                   |
   | \v       | 垂直制表符                                                   |
   | \\       | 反斜杠(\)                                                    |
   | \'       | 单引号                                                       |
   | \"       | 双引号                                                       |
   | \?       | 问号                                                         |
   | \0oo     | 八进制值(oo必须是有效的八进制数, 即每个o可表示0-7中的一个数) |
   | \xhh     | 十六进制值(hh必须是有效的十六进制数, 即每个h可表示0~f中的一个数)                  |


   - 警报字符是否能产生听到或看的警报, 取决于计算机的硬件
   - C标准规定新增的警报字符(\a)不得改变活跃位置. 标准中的活跃位置是指设备(屏幕,
     电传打字机, 打印机等).
   - C90开始, 不仅可以用十进制, 八进制表示字符常量, 还可以用十六进制表示常量, 即
     反斜杠后面跟一个x或X, 再加上1~3位十六进制数字
     - 例: Ctrl+P字符的十六进制码是10(相当于十进制的16), 可表示为: '\x10'或'\x010'

** _Bool类型
   C99标准添加了_Bool类型用于表示布尔值, 即逻辑值true和false. 因为C语言用值1表示
   true,值0表示false, 所以_Bool类型实际上也是一种占用1位存储空间的整数类型

** 浮点型
   - float
     1. 必须至少能表示6位有效数字(33.333333)
     2. 取值范围: 至少为: 10^-37 ~ 10^+37
     3. 通常存储要占用32位, 8位用于标识指数的值和符号, 剩下24位用于表示非指数部
        分(也叫做尾数或有效数)及其符号

   - double(双精度)
     1. 与float类型的最小取值范围相同, 但至少必须能表示10位有效数字
     2. 通常存储要占用64位: 一些系统将多出的32位全部用来表示非指数部分, 不仅增加
        了有效数字的位数(提高了精度), 而且还减少了舍入误差
     3. 至少有13位有效数字
   
   - long double
     1. 仅保证long dobule 类型至少与double类型的精度相同

   - Tips:
     1. 可以没有小数点或指数部分, 但不能同时省略2者
        #+begin_src c
          2E5
          19.28
          .8E-5
        #+end_src

     2. 默认情况下, 编译器假定浮点型常量是double类型的精度.
        1) 例如, 假设some是float类型的变量, 如下语句:
           #+begin_src c
             some = 2.0 * 4.0
           #+end_src
           1. 通常, 4,0和2.0倍储存为64位的double类型, 使用双精度进行乘法运算, 然后
           将乘积截断成float类型的宽度.
           1. 虽然这样做精度更高, 但是会减慢程序的运行速度
           2. 在浮点数后面加上 *f* 或 *F* 后缀可覆盖默认设置, 编译器会将浮点型常量
           看做float类型, 如2.3f和9.11E9F
           后缀说明:
           - f或F: float
           - l或L: long
           - 默认: double

   - 补充:
     C99标准添加了一种新的浮点型常量格式 -- 十六进制表示浮点型常量, 加上前缀表示
     (0x或0X), 用p和P分别代替e和E, 用2的幂代替10的幂(p计数法)
     例: ~0xa.1fp10~ 
   
   - 打印浮点值
     + printf()使用%f转换float和double
     + %e打印指数计数法的浮点数
     + 十六进制浮点数下: a和A分别代替e和E: printf参数对应%a
     + %Lf, %Le或%La: long double(见 ~show_pt.c~)

** 复数和虚数类型
   - 复数:
     1. float_Complex: 包含2个float类型的值, 分别表示复数的实部和虚部
     2. double_Complex
     3. long double_Complex

   - 虚数:
     1. float_Imaginary
     2. double_Imaginary
     3. long double_Imaginary

** 类型总结
   - 基本数据类型
     + 关键字:
       * int
       * long
       * short
       * unsinged
       * char
       * float
       * double
       * signed
       * _Bool
       * _Complex
       * _Imaginary

     + 有符号整型:
       * int: 不小于16位
       * short 或 short int: 最大的short类型整数 <= 最大的int类型整数. 至少16位
       * long 或 long int: >= 最大的int类型整数. 至少32位
       * long long 或 long long int: >= 最大的long类型整数. long long类型至少占
         64位

       * Tips: 旧DOS系统的PC提供16位的short和int, 32位都可以使用char类型位的long

       * Tips2: Windows95系统提供16位的short以及32位的int和long

     + 无符号整型
       * unsinged int / unsinged
       * unsinged long
       * unsinged short

     + 字符类型
       * char: 可以增加unsigned, 占用1字节: 通常是8位, 也可以是16位或更大(基本字
         符集)

     + 布尔类型
       * 1 - true, 0 - false
       * _Bool: 无符号int类型

     + 实浮点类型
       * float: 基本浮点类型, 至少6位有效数字
       * double: 至少10位和更大的指数
       * long long: 表示比dobule更多的有效数字和更大的指数
       
     + 复数和虚数浮点数(虚数是可选类型, 复数的实部和虚部都基于实浮点类型来构成)
       * float_Complex
       * dobule_Complex
       * long dobule_Complex
       * float_Imaginary
       * double_Imaginary
       * long long_Imaginary

** 类型大小
   - sizeof(见 ~typesize.c~)

   - Tips: 命名约定
     #+begin_src c
       int i_; // 前缀
       unsigned short us_; // 前缀

       int i_smart;
       unsigned short us_versmart;
     #+end_src

** 参数和陷阱
   - printf错误参数调用(见 ~badcount.c~)

** 程序运行情况
   详情代码见 ~excape.c~
   - \b: 退格字符使得光标左移, 某些系统会擦除字符, 某些不会
   - \r: 跳到光标起始处

** 刷新输出
   printf()语句会把输出发送到一个缓冲区(中间存储区域), 然后缓冲区中的内容再不断
   被发送到屏幕上.

   发送到屏幕的时机: 
   1. 缓冲区满
   2. 遇到换行字符
   3. 需要输入(旧式编译器遇到scanf()不会强行刷新, 可使用换行刷新)
   4. 手动刷新: fflush()

** 关键概念
   - C语言允许混合数据类型的表达式, 但是会进行自动类型转换, 以便在实际运算时统一
     使用一种类型
   - 计算机在内存中使用数值编码来表示字符. 

** 本章小结
   - 基本数据类型
     1. 整数类型
        1) 十进制
        2) 八进制: 0前缀
        3) 十六进制: 0x或0X前缀
     2. 浮点数类型
        1) float
        2) double
        3) long double
           ~浮点数可写成固定小数点的形式(9393.912)或指数形式(7.38E10)~

** 复习题
   1. a: 整型
      b: 浮点型
      c: 整型, 字符类型
      d\: 字符类型, 整型
   
   2. 精度不够

   3. int32_t: 确保类型名在不同系统中的功能相同, 编译器会把int或long替换成与当前
      系统相匹配的类型(在包含stdint和inttypes下)

   4. a: 退格字符
      b: 整型
      c: 浮点型
      d\: 十六进制
      e: 浮点类型(指数计数法)

   5. 见如下代码:
      #+begin_src c
        float g, h;
      #+end_src

   6. 见下表(见 ~res.c~)
      | 常量      | 类型  | 转换说明 |
      |-----------+-------+----------|
      | 12        | int   | %d       |
      | 0x3       | int   | %x       |
      | 'C'       | char  | %c       |
      | 2.34E07   | int   | %f      |
      | '\040\'   | char  | %c       |
      | 7.0       | float | %f       |
      | 6L        | long  | %ld     |
      | 6.0f      | float | %f       |
      | 0x5.b6p12 | float | %fx      |

   7. 略(TODO)

   8. 见 ~res2.c~

   9. 见 ~res3.c~

   10. 见 ~res4.c~

   11. a: 换行符
       b: \符
       c: "符
       d\: 制表符

** 编程练习
   1. 见 ~practice1.c~
   2. 见 ~practice2.c~
   3. 见 ~practice3.c~
   4. 见 ~practice4.c~
   5. 见 ~practice5.c~
   6. 见 ~practice6.c~
   7. 见 ~practice7.c~
   8. 见 ~practice8.c~
