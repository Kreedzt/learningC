* 第 14 章 结构和其他数据形式
  本章介绍以下内容:

  - 关键字: ~struct~, ~union~, ~typedef~
  - 运算符: ~.~, ~->~

  - 什么是 C 结构, 如何创建结构模板和结构变量

  - 如何访问结构成本员, 如何编写处理结构的函数

  - 联合和指向函数的指针

  - C 提供了结构变量(structure variable) 提高表示数据的能力, 可以创造新的格式.

** 示例问题: 创建图书目录
   打印一份图书目录, 需要打印每本书的信息: 书名, 作者, 出版社, 版权日期, 页数,
   册数和价格. 其中的一些项目(书名等)可以储存在字符数组中, 其他项目需要一个
   ~int~ 数组或 ~float~ 数组. 用 7 个不同的数组分别记录每一项比较繁琐, 尤其是想创
   建多份列表: 不同项目排序等.

   ~book.c~: 该程序示例演示的书目只包含书名, 作者和价格

   该程序创建的结构有 3 个部分, 每个部分都成为成员(member)或子弹(field). 这 3 部分中,
   一部分储存书名, 一部分储存作者名, 一部分储存价格.

   技巧:
   1. 为结构简历一个格式或样式
   2. 声明一个适合该样式的变量
   3. 访问结构变量的各个部分

** 建立结构声明
   结构声明(structure declaration)描述了一个结构的组织布局. 声明类似下面这样:

   #+begin_src c
     struct book {
       char title[MAXTITL];
       char author[MAXAUTL];
       float value;
     }
   #+end_src

   该声明描述了 1 个由 2 个字符数组和 1 个 ~float~ 类型变量组成的结构. 该声明 *并未创
   建市级的数据对象*, 只描述了该对象由什么组成.(有时, 我们把结构声明成为模板, 因
   为它勾勒出结构是如何储存数据的. *此模板并非 ~C++~ 的模板, ~C++~ 的模板更强大*)

   首先关键字 ~struct~, 它表明跟在其后的是一个结构, 后面是一个可选的标记(该例中
   是 ~book~), 稍后程序中可以使用该标记引用该结构. 所以,如下代码生效:

   #+begin_src c
     struct book library;
   #+end_src

   这把 ~library~ 声明为 一个使用 ~book~ 结构布局的结构变量

   在结构声明中, 用一对花括号括起来的是结构成员列表. 每个成员都用自己的声明来描
   述. 

   eg: ~title~ 部门是一个内含 ~MAXTITL~ 个元素的 ~char~ 类型数组. 成员可以是任意
   一种 ~C的数据类型~, 甚至可以是其他结构. 右花括号后面的 *分号声明是必须的*, 表
   示结构布局定义结束. 可以把这个声明放在所有函数的外部, 也可以是内部.

   结构的标记名是可选的. 但是以该程序示例中的方式建立结构时(一处定义, 另一处定义
   实际的结构变量), 必须使用标记
** 定义结构变量
   结构有 2 层含义, 一层含义是 "结构布局", 告诉编译器如何表示数据, 但是它并未让编
   译器为数据分配空间. 下一步是创建一个结构变量, 即是结构的另一层含义:

   #+begin_src c
     struct book library;
   #+end_src

   编译器执行这行代码便创建了一个结构变量 library. 编译器使用 book 模版为该变量分配
   空间: 一个内涵 ~MAXTITL~ 个元素的 ~char~ 数组, 一个内含 ~MAXAUTL~ 个元素的
   ~char~ 数组和一个 ~float~ 类型的变量. 这些存储空间都与一个名称 ~library~ 结合
   在一起

   在结构变量的声明中, ~struct book~ 所起的作用相当于一般声明中的 ~int~ 或
   ~float~. 例如, 可以定义 2 个 ~struct book~ 类型的变量, 或者甚至是指向 ~struct
   book~ 类型结构的指针:

   #+begin_src c
     struct book doyle, panshin, *ptbook;
   #+end_src

   结构变量 ~doyle~ 和 ~panshin~ 中都包含 ~title~, ~author~ 和 ~value~ 部分. 指
   针 ~ptbook~ 可以指向 ~doyle~, ~panshin~ 或任何其他 ~book~ 类型的结构变量. 从
   本质上看, ~book~ 结构声明创建了一个名为 ~struct book~ 的新类型.

   就计算机而言, 下面的声明:

   #+begin_src c
     struct book library;
   #+end_src
   
   是以下声明的简化:

   #+begin_src c
     struct book {
       char title[MAXTITL];
       char author[AXAUTL];
       float value;
     } library; // 声明右花括号后跟变量名
   #+end_src

   换言之, 声明结构的过程和定义结构变量的过程可以 *组合成一个步骤*, 组合后的结构
   声明和结构变量定义不需要使用结构标记:

   #+begin_src c
     struct
     {
       char title[MAXTITL];
       char author[MAXAUTL];
       float value;
     } library;
   #+end_src

   然而, 如果打算多次使用结构模板, 就要使用代表及的形式; 或者使用 ~typedef~

   这是 *定义结构变量* 的一个方面, 并未初始化结构变量
*** 初始化结构
    初始化一个结构变量(ANSI 之前, 不能用自动变量初始化结构, ANSI 之后可以用任意存
    储类别) 与初始化数组的语法类似:

    #+begin_src c
      struct book library = {
        "The Pious Pirate and the Devious Damsel",
        "Renee Vivotte",
        1.95
      };
    #+end_src

    我们使用在一对花括号中括起来的初始化列表进行初始化, 各初始化项用逗号分隔. 因
    此, ~title~ 成员可以被初始化为一个字符串, ~value~ 成员可以被初始化为一个数字.
    
    *注意*: 初始化结构和类别储存期

    如果初始化静态存储器的变量(如: 静态外部链接, 静态内部链接或静态无链接), 必须
    使用常量值. 这统一适用于结构. 如果初始化一个静态存储器的结构, 初始化列表中的
    值必须是常量表达式. 如果是自动存储期, 初始化列表中的值可以不是常量.
*** 访问结构成员
    结构类似于一个 "超级数组", 这个超级数组中, 可以是一个元素为 ~char~ 类型, 下
    一个元素为 ~float~ 类型, 下一个元素为 ~int~ 数组. 可以通过数组下标单独访问数
    组中的各元素.

    使用 *结构成员运算符*: 点(.) 访问结构中的成员.

    本质上, ~.title~, ~.author~ 和 ~.value~ 的作用相当于 ~book~ 结构的下标.

*** 结构的初始化器
    C99 和 C11 位结构提供了 *特定初始化器(designated initializer)*, 其语法与数组的
    指定初始化器类型, 但是, 结构的指定初始化器使用点运算符和成员名(而不是方括号
    和下标)标识特定的元素.

    eg: 只初始化 ~book~ 结构的 ~value~ 成员:
    #+begin_src c
      struct book suprise = { .value = 10.99 };
    #+end_src

    可以按照任意顺序使用指定初始化器:
    #+begin_src c
      struct book gift = {
        .value = 25.99
        .author = "Hames Broadfool",
        .title  = "Rue for the Toad"
      };
    #+end_src

    与数组类似, 在指定初始化器后面的普通初始化器, 为指定成员后面的成员提供初始值.
    另外, *对特定成员的最后一次赋值才是它实际获得的值*

    eg:
    #+begin_src c
      struct book gift = {
        .value = 18.90,
        .author = "Philionna Pestle",
        0.25
      };
    #+end_src

    新的赋值 ~0.25~ 取代了 ~18.9~.
** 结构数组
   ~manybook.c~ 程序创建了一个内涵 100 个结构变量的数组. 由于该数组是自动存储类别
   的对象, 其中的信息被储存在栈(stack)中. 如此大的数组需要很大一块内存, 这可能会
   导致一些问题. 如果在运行时出现错误, 可能抱怨栈大小或栈溢出, 编译器可能使用了
   一个默认大小的栈, 这个栈对于该例而言太小. 要修正这个问题, 可以使用编译器选项
   设置栈大小为 10000, 以容纳这个结构数组, 或者可以创建静态或外部数组(这样, 编译
   器就不会把数组放在栈中); 或者可以减少数组大小为 16


   Borland C 和浮点数

   如果程序不使用浮点数, 旧式的 Borland C 编译器会尝试使用小版本的 ~scanf()~ 来压
   缩程序. 然而, *如果在一个结构数组中只有一个浮点值*, 那么编译器(DOS 的 Borland
   C/C++ 3.1 之前的版本, 不是 Borland C/C++ 4.0) 就无法发现它的存在. 结果, 编译器
   会生成如下的消息:

   #+begin_src text
     scanf: floatint point formats not linked
     Abnormal program termination
   #+end_src

   一种解决方案是: 在程序汇总添加下面的代码:
   
   #+begin_src c
     #include <math.h>

     double dummy = sin(0.0);
   #+end_src
   
   这段代码强制编译器载入浮点版本的 ~scanf()~

*** 声明结构数组
    声明结构数组和声明其他类型的数组类似

    #+begin_src c
      struct book library[MAXBKS];
    #+end_src

    以上代码把 ~library~ 声明为一个内含 ~MAXBKS~ 个元素的数组. 数组的每个元素都
    是一个 ~book~ 类型的数组. 因此, ~library[0]~ 是第一个 ~book~ 类型的结构变量.
    数组名 ~library~ 本身不是结构名, 它是一个数组名, 该数组中的每个元素都是
    ~struct book~ 类型的结构变量

*** 标识结构数组的成员
    为了标识结构数组的成员, 可以采用访问单独结构的规则: 在结构名后面加一个点运算
    符, 再在点运算符后面写上成员名:

    #+begin_src c
      library[0].value // 第1个数组元素与value相关联
    #+end_src

    总结:

    #+begin_src c
      library // 一个book结构的数组
      library[2] // 一个数组元素, 该元素是book结构
      library[2].title // 一个char数组(library[2]的title成员)
      library[2].title[4] // 数组中library[2] 元素的title成员的一个字符
    #+end_src

*** 程序讨论
    该程序主要的改动之处是: 插入一个 ~while~ 循环读取多个项

    程序中有如下几行:
    #+begin_src c
      while (getchar() != '\n') {
        continue;
      }
    #+end_src

    这段代码弥补了 ~scanf()~ 函数遇到空格和换行符就结束读取的问题. 当用户输入书
    的价格时, 可能输入如下信息:
    #+begin_src text
      12.50[Enter]
    #+end_src

    其传送的字符序列如下: 
    #+begin_src text
      12.50\n
    #+end_src

    ~scanf()~ 函数接受 1, 2, ., 5 和 0, 但是把 ~\n~ 留在输入序列中. 如果没有清理输
    入行的代码, 就会把留在输入序列中的换行符当作空行读入
** 嵌套结构
   在一个结构中包含另一个结构(嵌套结构)很方便. 

   见 ~friend.c~

   在结构声明中创建嵌套结构:
   #+begin_src c
     struct names handle;
   #+end_src

   访问嵌套结构中的成员:
   #+begin_src c
     printf("Hello, %s!\n", fellow.handle.first);
   #+end_src

   从左往右解释: ~(fellow.handle).first~
** 指向结构的指针
   使用指向结构的指针的优势:
   1. 像指向数组的指针比数组本身更容易操控(eg: 排序问题)一样, 指向结构的指针通常
      比结构本身更容易操控
   2. 早期的 C 实现中, *结构不能作为参数传递给函数*, 但是 *可以传递指向结构的指针*
   3. 即使能传递一个接哦股, 传递指针通常 *更有效率*
   4. 一些用于表示数据的结构中包含指向其他结构的指针

   见 ~friends.c~
*** 声明和初始化结构指针
    声明结构指针:
    #+begin_src c
      struct guy* him;
    #+end_src

    这个语法和其他指针声明一样. 该声明 *并未创建* 一个新的结构没, 但是指针 ~him~
    现在可以指向任意现有的 ~guy~ 类型的结构.

    指向结构的地址
    #+begin_src c
      him = &fellow[0];
    #+end_src

    Tips: 在有些系统 *必须把每个成员都放在偶数地址上, 或 4 倍数的地址上*.
    在这种系统中, 结构的内部就存在 *未使用的"缝隙"*

*** 用指针访问成员
    1. 用 ~->~ 运算符
       如果 ~him == &barney~, 那么 ~him->income~ 即是 ~barney.income~
       如果 ~him == &fellow[0]~, 那么 ~him->income~ 即是 ~fellow[0].income~

       ~->~ 运算符后面的结构指针和 ~.~ 运算符后面的结构名 *工作方式相同*

    2. 因为 ~&~ 和 ~*~ 是一对 *互逆运算符*. 因此可以做如下替代:
       #+begin_src c
         fellow[0].income == (*him).income;
       #+end_src

       *必须使用圆括号*, 因为 ~.~ 运算符比 ~*~ 运算符的优先级要高
** 向函数传递结构的信息
   函数的参数把值传递给函数. 每个值都是一个数字: 可能是 ~int~ 类型, ~float~ 类型,
   ASCⅡ字符码, 或是一个地址. 然而, 一个结构比一个单独的值更复杂, 所以 *以前的 C 实
   现不允许把结构作为参数传递给函数*. 当前 ASNI C 允许. 所以可选传递结构本身或是
   指针.

*** 传递结构成员
    只要结构成员是一个具有单个值的数据类型, 便可把它作为参数传递给接收该特定类型
    的函数

    ~funds1.c~ 程序把客户的银行账户添加到他/她的储蓄和贷款账户中.
    
    把结构的信息高速函数的第 2 种方法是: 让被调函数知道自己正在处理一个结构.

*** 传递结构的地址
    ~funds2.c~: ~sum()~ 函数使用指向 ~funds~ 结构的指针作为它的参数. 然后通过
    ~->~ 运算符获取值.

    虽然该函数并未使用其他成员, 但是也可以访问它们. 必须使用 ~&~ 运算符来获取结
    构的地址. 和数组名不同, 结构名只是其地址的别名
*** 传递结构
    ~funds3.c~
*** 其他结构特性
    现在的 C 允许把一个结构赋值给另一个结构, 但数组不能这样做.
    #+begin_src c
      o_data = n_data; // 把一个结构赋值给另一个结构
    #+end_src

    这条语句把 ~n_data~ 的每个成员的值都赋给 ~o_data~ 的相应成员. 即使成员是数组,
    也能完成赋值. 还可以把一个结构初始化为相同类型的另一个结构:
    
    #+begin_src c
      struct names right_field = { "Ruthie", "George" };
      struct names captain = right_field; // 把一个结构初始化为另一个结构
    #+end_src

    现在的 C(包括 ANSI C), 函数不仅能把结构本身作为参数传递, 还能 *把结构作为返回
    值返回*. 把结构作为函数参数可以把结构的信息传送给函数; 把结构作为返回值的函
    数能把结果的信息从被调函数传回主调函数. *结构指针也允许这种双向通信*.

    ~names1.c~ 演示以传递 *指针* 的方式处理结构
    该程序把任务分配给 3 个函数来完成, 都在 ~main()~ 中调用. 每调用一个函数就把
    ~person~ 结构的地址传递给它

    - ~getinfo()~ 函数把结构的信息从自身传递给 ~main()~. 通过与用户交互赋值

    - ~makeinfo()~ 函数使用双向传输方式传送信息. 通过使用指针定位结构中的数据

    - ~showinfo()~ 函数不改变数组的内容, 所以声明为 ~const~

    ~names2.c~: 使用结构参数和返回值来完成相同的任务.

    程序中的 *每个函数都创建了自己的 ~peron~ 备份*, 所以该程序使用了 4 个不同的结
    构

    所以, ~makeinfo()~ 的修改后 *必须返回*
*** 结构和结构指针的选择
    把指针作为参数: 
    优点: 执行起来更快, 缺点: 无法保护数据. 被调函数中的某些操作可能会意外影响原
    来结构中的数据

    把结构作为参数:
    函数处理的原始数据的副本, 这保护了原始数据. 代码风格也更清楚, *较老版本* 的
    实现可能无法处理, 而且结构浪费时间和存储空间. 

    通常: 为了追求效率会使用结构指针作为参数, 如需防止原始数据被意外修改, 应使用
    ~const~ 限定符. 按值传递结构是处理小型结构的最常用的方法

*** 结构中的字符数组和字符指针
    是否可以使用指向 ~char~ 的指针来代替字符数组
    #+begin_src c
      #define LEN 20

      struct names
      {
        char first[LEN];
        char last[LEN];
      };
    #+end_src

    改为:
    #+begin_src c
      struct pnames
      {
        char* fist;
        char* last;
      };
    #+end_src

    #+begin_src c
      struct names veep = { "Talia", "Summers" };
      struct pnames treas = { "Brad", "Fallingjaw" };

      printf("%s and %s\n", veep.first, treas.first);
    #+end_src

    可行, 但是会有麻烦, ~pnames~ 类型的结构变量 ~treas~ 储存在编译器储存 *常量*
    的地方. ~pnames~ 结构不用为字符串分配任何存储空间. 指针应该只用来在程序中管
    理那些已分配和在别处分配的字符串.

    #+begin_src c
      struct names accountant;
      struct pnames attorney;

      puts("Enter the last name of your accountant:");
      scanf("%s", accountant.last);

      puts("Enter the last name of your attorney:");
      scanf("%s", attorney.last); // 潜在危险
    #+end_src

    对于 ~attorney~, ~scanf()~ 把字符串放到 ~last~ 的地址上. 这是 *未经初始化的
    变量*, 地址可以是 *任何值*.

    误用 ~char~ 指针会 *导致严重问题*
    
*** 结构, 指针和 ~malloc()~
    如果使用 ~malloc()~ 分配内存并使用指针储存的地址, 那么在结构中使用指针处理字
    符串就比较合理. 这种方法的优点是: 可以请求 ~malloc()~ 为字符串分配合适的存储
    空间. 可以要求用 4 字节储存 "Joe" 和 18 字节储存 "Rasolofomasoandro".

    新的结构声明如下:
    #+begin_src c
      struct namect
      {
        char* fname; // 用指针代替数组
        char* lname;
        int letters;
      };
    #+end_src

    新版本的 ~getinfo()~ 把用户逇输入读入临时数组中, 调用 ~malloc()~ 函数分配存
    储空间, 并把字符串拷贝到新分配的存储空间中. 对名和姓都要这样做
    #+begin_src c
      void getinfo(struct namect* pst)
      {
        char temp[SLEN];
        printf("Please enter your fist name.\n");

        s_gets(temp, SLEN);

        // 分配内存储存名
        pst->fname = (char*)malloc(strlen(temp) + 1);
        // 把名拷贝到已分配的内存
        strcpy(pst->fname, temp);
        printf("Please enter your last name.\n");
        s_gets(temp, SLEN);
        pst->lname = (char*)malloc(strlen(temp) + 1);
        strcpy(pst->lname, temp);
      }
    #+end_src

    要理解这 2 个字符串都未储存在接哦股中, 储存在 ~malloc()~ 分配的内存块中. 然
    而, 结构中储存着这 2 个字符串的地址, 处理字符串的函数通常都要使用字符串的地址,
    因此, 不用修改程序中的其他函数

    记住 ~malloc()~ 应该与 ~free()~ 成对使用. 见 ~names3.c~
*** 复合字面量和结构(C99)
    C99 的复合字面量特定可用于结构和数组. 
    eg: 可以使用复合字面量创建一个数组作为函数的参数赋给另一个结构. 语法是把类型
    名放在圆括号中, 后面紧跟一个用花括号括起来的初始化列表

    #+begin_src c
      (struct book){ "The Idiot", "Fyodor Dostoyevsky", 6.99 }
    #+end_src
    
    ~complit.c~ 示例: 使用复合字面量为一个结构变量提供 2 个可替换的值

    还可以把复合字面量作为函数的参数. 如果函数接受一个结构, 可以把复合字面量作为
    实际参数传递:

    #+begin_src c
      struct rect { double x; double y };
      double rect_area(struct rect r) { return r.x * r.y };

      // ...

      double area;
      area = rect_area((struct rect) { 10.5, 20.0 });
    #+end_src
    值 210 被赋给 ~area~

    如果函数接受一个地址:
    #+begin_src c
      struct rect { double x; double y };

      double rect_areap(struct rect* rp) { return rp->x * rp->y; }

      double area;

      area = rect_arep(&(struct rect) { 10.5, 20.0 });
    #+end_src

    复合字面量在所有函数的外部, 具有 *静态存储期*; 如果复合字面量在块中, 则具有
    *自动存储期*. 复合字面量和普通初始化列表的语法规则相同. 这意味着, 可以在复合
    字面量中使用指定初始化器

*** 伸缩型数组成员(C99)
    C99 新增特性: 伸缩型数组成员(flexible array member), 利用这项特性声明的结构,
    其最后一个数组成员具有一些特性:
    1. 数组 *不会立即存在*
    2. 伸缩型数组成员可以编写合适的代码, 就像它确实存在并具有所需数目的元素一样

    声明一个伸缩型数组成员有如下规则:
    1. 伸缩型数组成员必须是结构的最后一个成员
    2. 结构中必须至少有一个成员
    3. 伸缩型数组的声明类似于普通数组, 至少它的方括号中是空的.
      
    eg:
    #+begin_src c
      struct flex
      {
        int count;
        double average;
        double scores[]; // 伸缩型数组成员
      }
    #+end_src
    
    声明一个 ~struct flex~ 类型的结构变量时, 不能用 ~scores~ 做任何事, 因为 *没
    有给这个数组预留存储空间*. 实际上, C99 的意图并不是让你声明 ~struct flex~ 类
    型的变量, 而是希望你声明一个指向 ~struct flex~ 类型的 *指针*, 然后用
    ~malloc()~ 来分配足够的空间. 例如, 假设用 ~scores~ 表示一个内含 5 个 ~double~
    类型值的数组, 可以这样做
    #+begin_src c
      struct flex* pf; // 声明一个指针
      // 请求一个未结构和一个数组分配存储空间
      pf = malloc(sizeof(struct flex) + 5 * sizeof(double));
    #+end_src

    现在有足够的存储空间储存 ~count~ , ~average~ 和一个内含 5 个 ~double~ 类型值的
    数组, 可以用指针 ~pf~ 访问这些成员:
    #+begin_src c
      pf->count = 5;
      pf->scores[2] = 18.5;
    #+end_src
    
    eg: ~flexmemb.c~

    带伸缩型数组成员有一些特殊处理要求:
    1. 不能用 *结构进行赋值或拷贝*:
       #+begin_src c
         struct flex *pf1, *pf2; // 都是接哦股
         //...
         *pf2 = *pf1; // 不要这样做
       #+end_src

       这样做只能拷贝 *除伸缩型数组成员以外* 的其他成员. 确实要进行拷贝请使用
       ~memcpy()~

    2. 不要以按值方式把这种结构传递给结构. 原因相同, 按值传递一个参数与赋值类型.
       要把结构的地址传递给函数.

    3. 不要使用带伸缩型数组的结构 *作为数组成员* 或另一个结构的成员
       
    这种类型与结构中最后一个成员是伸缩型数组情况, 称为 ~struct hack~. 除了伸缩型
    数组成员在声明时用空的方括号外, ~struct hack~ *特指大小为 0 的数组*. 然而, 该
    特性是 ~GCC~ 的, *不属于* C 标准, 这种伸缩型数组成员方法是标准认可的编程技巧.
*** 匿名结构(C11) 
    匿名结构是一个没有名称的结构成员.
    先考虑如何创建嵌套结构:
    #+begin_src c
      struct names
      {
        char first[20];
        char last[20];
      };

      struct person
      {
        int id;
        struct names name; // 嵌套结构成员
      };

      struct person ted = { 8483, { "Ted", "Grass" } };
    #+end_src

    这里, name 成员是一个嵌套结构. 可以使用如下方式访问 "ted":
    #+begin_src c
      puts(ted.name.first);
    #+end_src

    在 C11 中, 可以用嵌套的匿名成员结构定义 person:
    #+begin_src c
      struct person
      {
        int id;
        struct {
          char first[20];
          char last[20];
        }; // 匿名结构
      }
    #+end_src

    初始化 ted 的方式相同:
    #+begin_src c
      struct person ted = { 8483, { "Ted", "Grass" } };
    #+end_src

    *在访问时简化了步骤*:
    #+begin_src c
      puts(ted.first);
    #+end_src

    也可以把 first 和 last 直接作为 ~person~ 的成员, 删除嵌套循环. 匿名特性在嵌
    套联合中更加有用
*** 使用结构数组的函数
    假设一个函数要处理一个结构数组. 由于数组名就是该数组的地址, 所以可以把它传递
    给函数. 另外: 该函数还需访问结构模板. 为了理解该函数的工作原理, ~funds.c~ 中
    把前面的金融程序扩展为 2 人, 所以需要一个内含 2 个 ~founds~ 结构的数组

    要点:
    1. 可以把数组名作为数组中的第 1 个结构的地址传递给函数
    2. 然后可以用数组表示法访问数组中的其他结构.
       #+begin_src c
         sum(&jones[0], N);
       #+end_src
    3. 由于 ~sum()~ 函数不能改变原始数据, 所以该函数使用了 ~ANSI C~ 的限定符 ~const~

** 把结构内容保存到文件中
   由于结构可以储存不同的信息, 所以它是构建数据库的 *重要工具*.

   eg: 用一个结构储存雇员或汽车零件的相关信息. 最终, 我们要把这些信息储存在文件
   中, 并且能再次检索. 数据库文件可以包含任意数量的此类数据对象. 储存在一个结构
   中的整套信息被称为记录(record), 单独的项被称为字段(field).

   或许储存记录最没效率的方法是用 ~fprintf()~.

   eg: 14.1 中的 ~book~ 结构:
   #+begin_src c
     #define MAXTITL 40
     #define MAXAUTL 40

     struct book
     {
       char title[MAXTITL];
       char author[MAXAUTL];
       float value;
     };
   #+end_src

   当 ~pbook~ 标识一个文件流时, 可用如下语句储存(假设 ~primer~ 为结构变量):
   #+begin_src c
     fprintf(pbooks, "%s %s %.2f.\n", primer.title, primer.author, primer.value);
   #+end_src

   更好的方案是使用 ~fread()~ 和 ~fwrite()~ 函数读写结构大小的单元:
   eg:
   #+begin_src c
     fwrite(&primer, sizeof(struct book), 1, pbooks);
   #+end_src

   定位到 ~primer~ 结构变量开始的位置, 并把结构中的所有字节都拷贝到与 ~pbooks~
   相关的文件中. ~sizeof(struct book)~ 告诉函数待拷贝的一块数据的大小., 1 表示次
   数

   以二进制表示法储存数据的缺点是: 不同的系统, 不同的编译器可能使用不同的二进制表示法, 所以数
   据文件 *可能不具备可移植性*.

*** 保存结构的程序示例
    把 1.42 的程序清单修改为一个新的版本, 把书名保存在 ~book.dat~ 文件中, 如果该文
    件已存在, 程序将显示它定期的内容, 然后允许在文件中添加内容

    见 ~booksave.c~

*** 程序要点
    首先, 以 ~"a+b"~ 模式打开文件, 允许读取整个文件并在末尾添加内容

    选择二进制模式是因为 ~fread()~ 和 ~fwrite()~ 函数要使用二进制文件. 虽然结构
    中有些内容是文本, 但 ~value~ 成员不是文本. 如果使用文本编辑器查看, 文本内容
    正常, 数值部分不可读, 可能会导致乱码

    ~rewind()~ 函数确保指针位于文件开始处, 为读文件做好准备

    第 1 个 ~while~ 循环每次把一个结构读到结构数组中, 当数组已满或读完文件时停止,
    变量 ~filecount~ 统计已读结构的变量.

    第 2 个 ~while~ 循环提示用户进行输入, 并接受用户的输入

    然后 ~for~ 循环打印文件和用户输入的数据.

    可以用一个循环就在文件末尾一次添加一个结构, 但还是决定用 ~fwrite()~ 一次写入
    一块数据, ~count - filecount~ 求值得新添加的书籍数量, 然后调用 ~fwrite()~ 把
    结构大小的块写入文件. 由于表达式 ~&library[filecount]~ 是数组中第 1 个新结构
    的地址, 所以拷贝从这里开始.

    这种方法浪费存储空间, 因为还是保存了结构中未使用的被部分, 该结构的大小是:
    ~2 * 40 * sizeof(char) + sizeof(float)~. 实际上不是每个输入项头需要这么多空
    间. 但是, 让每个输入块的大小相同在检索数据时很方便.

    另一个方法是使用可变大小的记录. 为了方便读取文件中的这种记录, 每个记录以数值
    字段规定记录的大小. 这比当前方法复杂. 通常, 这种方法涉及 *链式结构* 和动态分
    内存分配

** 链式结构
   结构的多种用途之一: 创建新的数据形式. 计算机用户已经开发出的一些数据形式比我
   们提到过的数组和简单结构更有效地解决特定的问题. 包括: 队列, 二叉树, 堆, 哈希
   表和图表. 许多这样的形式都由 *链式结构(linked structure)* 组成. 通常, 每个结
   构都包含一两个数据项和一两个指向其他同类型结构的指针. 这些指针把每一个结构和
   另一个结构连接起来, 并提供一种路径能遍历整个彼此链接的结构.

   分级或树状的结构是否比数组高效? 考虑一个有 10 级节点树的情. 它有 ~2^10-1~ 或
   (1023)个节点, 可以储存 1023 个单词. 如果这些单词以某种规则排列, 那么可以从最顶
   层开始, 逐级向下移动查找单词, 最多只需移动 9 次便可找到人一旦此. 如果把这些单词
   都放在一个数组中, 最多要查找 1023 个元素才能找出所需的单词.

** 联合简介
   联合(union)是一种数据类型, 它能在同一个内存空间中储存不同的数据类型(不是同时
   储存). 其最典型的用法是, 设计一种表以储存既无规律, 事先也不知道顺序的混合类型.
   使用联合类型的数组, 其中的联合都大小相等, 每个联合可以储存各种数据类型.

   
   创建联合和创建结构的方式相同, 需要一个联合模板和联合变量. 可以用一个步骤定义
   联合, 也可以用联合标记分 2 步定义.

   eg: 带标记的联合模板
   #+begin_src c
     union hold {
       int digit;
       double bigfl;
       char letter;
     };
   #+end_src

   根据以上声明的结构可以储存一个类型的值或一个 double 类型的值或一个 char 类型
   的值

   eg: 3 个 hold 类型相关的变量:
   #+begin_src c
     union hold fit; // hold 类型的联合变量
     union hold save[10]; // 内含10个联合变量的数组
     union hold* pu; // 指向hold类型联合变量的指针
   #+end_src

   第一个声明创建了一个单独的联合变量 ~fit~. 编译器分配足够的空间以便它能储存联
   合声明中占用最大字节的类型. 本例中是 ~double~ 类型的数据. 第二个声明创建了一
   个数组 ~save~, 内含 10 个元素, 每个元素都是 8 字节. 第 3 个声明创建了一个指针

   可以初始化联合. 需要注意的是, 联合只能储存一个值, 这与结构不同. 有 3 种初始化的
   方法: 把一个联合初始化为另一个同类型的联合, 初始化联合的第 1 个元素, 或者根据
   C99 标准, 使用指定初始化器.

   #+begin_src c
     union hold valA;
     valA.letter = 'R';
     union hold valB = valA; // 用另一个联合来初始化
     union hold valC = { 88 }; // 初始化联合的 digit 成员
     union hold valD = { .bigfl = 118.2 }; // 指定初始化器
   #+end_src

*** 使用联合
    下面是联合的一些方法:
    #+begin_src c
      fit.digit = 23; // 把 23 储存在 fit, 占2字节
      fit.bigfl = 2.0; // 清除23, 储存2.0, 占8字节
      fit.letter = 'h'; // 清除2.0, 储存h, 占1字节
    #+end_src

    点运算符表示正在使用哪种数据类型. 在联合中, *一次只储存一个值*. 即使有足够的
    空间, 也不能同时储存一个 ~char~ 类型值和一个 ~int~ 类型值. 编写代码时要注意
    当前储存在联合中的数据类型.

    和用指针访问结构使用 ~->~ 运算符一样, 用指针访问联合时也要使用 ~->~ 运算符
    
    #+begin_src c
      put = &fit;
      x = pu->digit; // 相当于 x = fit.digit;
    #+end_src
    
    不要像下面的语句这样:
    #+begin_src c
      fit.letter = 'A';
      flnum = 3.02 * fit.bigfl; // 错误
    #+end_src

    因为储存在 ~fit~ 中的是 ~char~ 类型, 但是下一行却假定内容是 ~double~ 类型

    用一个成员把值储存在一个联合中, 然后用另一个成员查看内容, 这种用法有时很有用

    联合的另一种用法是: 在结构中储存与其成员有从属关系的信息.
    eg: 用一个结构表示一辆汽车. 如果汽车属于驾驶者, 就要用一个结构成员来描述这个
    所有者. 如果汽车被租赁, 那么需要一个成员来描述其租赁公司.
    
    #+begin_src c
      struct owner
      {
        char socsercurity[12];
        // ...
      };

      struct leasecompany
      {
        char name[40];
        char headquarters[40];
        // ...
      };

      union data {
        struct owner owncar;
        struct leasecompany leasecar;
      };

      struct car_data
      {
        char make[15];
        int status; // 私有为 0, 租赁为 1
        union data ownerinfo;
        // ...
      };
    #+end_src

    假设 ~flits~ 是 ~char_data~ 类型的结构变量, 如果 ~flits.status~ 为 0, 程序将
    使用 ~flits.ownerinfo.owncar.socsecurity~, 如果 ~flits.status~ 为 1, 程序则使
    用 ~flits.ownerinfo.leasecar.name~

*** 匿名联合(C11)
    匿名联合和匿名结构的工作原理相同, 即匿名联合是一个接哦股或联合的无名联合成员.

    eg: 重新定义 ~car_data~
    #+begin_src c
      struct owncar
      {
        char socsercurity[12];
        // ...
      };

      struct leasecompany
      {
        char name[40];
        char headquarters[40];
        // ...
      };

      struct car_data
      {
        char make[15];
        int status;
        union {
          struct owner owncar;
          struct leasecompany leasecar;
        };
      };
    #+end_src

    现在, 如果 ~flits~ 是 ~car_data~ 类型的结构变量, 可以用
    ~flits.owncar.socsecurity~ 代替 ~flits.ownerinfo.owncar.socsecurity~


    总结: 
    成员运算符: ~.~

    该运算符与结构或联合名一起使用, 指定结构或联合的一个成员. 如果 ~name~ 是一个
    结构的名称, ~member~ 是该结构模板指定的一个成员名, 下面标识了该结构的这个成
    员:

    #+begin_src c
      name.member;
    #+end_src

    ~name.member~ 的类型就是 ~member~ 的类型. 联合使用成员运算符的方式与结构相同
    
    eg:
    #+begin_src c
      struct {
        int code;
        float cost;
      } item;

      item.code = 1265;
    #+end_src

    间接成员运算符: ~->~
    
    该运算符和指向结构或联合的指针一起使用, 标识结构或联合的一个成员. 假设
    ~ptrstr~ 是指向结构的指针, ~member~ 是该结构模板指定的一个成员, 那么:
    #+begin_src c
      ptrstr->member
    #+end_src

    标识了指向结构的成员. 联合使用间接成员运算符的方式与结构相同.

    eg:
    #+begin_src c
      struct {
        int code;
        float cost;
      } item, *ptrst;

      ptrst = &item;
      ptrst->code = 3451;
    #+end_src

    最后一条语句把一个 ~int~ 类型的值赋给 ~item~ 的 ~code~ 成员.
    以下 3 个表达式等价:
    #+begin_src c
      ptrst->code
      item.code
      (*ptrst).code
    #+end_src
    
** 枚举类型
   可以用枚举类型(enumerated type) 声明符号命令来表示整型常量. 使用 ~enum~ 关键
   字, 可以创建一个新 "类型" 并指定它可具有的值(实际上, ~enum~ 常量是 ~int~ 类型,
   因此, 只要能使用 ~int~ 类型的地方就可以使用枚举类型 ). 枚举类型的目的是提高程
   序的可读性, 它的语法与结构的语法相同.

   #+begin_src c
     enum spectrum { red,  orange, yellow, green, blue, violet };
     enum spectrum color;
   #+end_src

   第 1 个声明创建了 ~spectrum~ 作为标记名, 允许把 ~enum spectrum~ 作为一个类型
   名使用. 第 2 个声明使 ~color~ 作为该类型的变量. 第 1 个声明中花括号的标识符被
   拒了 ~spectrum~ 变量可能有的值. 因此, ~color~ 可能的值是 ~red~, ~orange~,
   ~yellow~ 等. 这些符号常量被称为 *枚举符(enumerator)*. 然后, 便可以这样用:

   #+begin_src c
     int c;
     color = blue;

     if (color == yellow) {
       // ...
       for (color = red; color <= violet; ++color) {
         // ..
       }

     }
   #+end_src

   虽然枚举符(如 ~red~ 和 ~blue~) 是 ~int~ 类型, 但是枚举类型可以是任意整数类型,
   前提是该整数类型可以储存枚举常量. 

   eg: ~spectrum~ 的枚举符范围是 0~5, 所以编译器可以用 ~unsigned char~ 来表示
   ~color~ 变量

   Tips: C 枚举的一些特性 *并不适用于 C++*. 
   eg: C 允许枚举变量使用 ~++~ 运算符, 但是 C++ 标准不允许. 如果编写的代码会并入
   C++ 程序, 那么必须把上例的 color 声明为 ~int~ 类型, 才能兼容

*** ~enum~ 常量
    假定有前面的枚举声明, 以下代码可以生效:
    #+begin_src c
      printf("red = %d, orange = %d\n", red, orange);
    #+end_src

    输出:
    #+begin_src bash
      red = 0, orange = 1
    #+end_src

    ~red~ 成为一个有名称的常量, 代表整数 0. 类似地, 其他标识符都是有名称的常量,
    分别代表 1~5. *只要是能用整型常量的地方就可以使用枚举常量*.

    eg: 声明数组时与 ~switch~ 语句中.

*** 默认值
    默认的情况下, 枚举类别中的常量都被赋予 ~0, 1, 2~ 等. 因此, 下面的声明中
    ~nina~ 的值是 3:
    #+begin_src c
      enum kids { nippy, slats, skippy, nina, liz };
    #+end_src

*** 赋值
    在枚举声明中, 可以为枚举常量 *指定整数值*:
    #+begin_src c
      enum levels { low = 100, medium = 500, high = 2000 };
    #+end_src
    
    如果只给一个枚举常量赋值, 没有对后面的枚举常量赋值, 那么后面的常量会被赋予后
    续的值

    eg:
    #+begin_src c
      enum feline {
        cat, // 0
        lymx = 10, // 10
        puma, // 11
        tiger // 12
      };
    #+end_src
    
*** ~enum~ 的用法
    枚举类型的目的是提高程序的可读性和可维护性. 
    注意: *枚举类型只能在内部使用*. 
    eg: 要输入 ~color~ 中 ~orange~ 的值, 只能输入 1, 而不是单词 ~orange~.
    或者, 让程序先读入字符串 "orange", 再将其转为 ~orange~ 代表的值

    因为枚举类型是整数类型, 所以可以在表达式中以使用整数变量的方式使用 ~enum~ 变
    量. 它们用在 ~case~ 语句中很方便

    eg: ~enum.c~: 把 ~red~ 的值设置为 0, 使之成为指向字符串 "red" 的指针的索引

*** 共享名称空间
    C 语言使用名称空间(namespace)标识程序中的各部分, 即通过名称来识别, 作用域是名
    称空间概念的一部分: 2 个 *不同作用域的同名变量不冲突*. 名称空间是分类别的.
    在特定作用域中的结构标记, 联合标记和枚举标记都共享相同的名称空间, 该名称空间
    与普通变量使用的空间不同. 这意味着在相同作用域中变量和标记的名称可以相同, 不
    会引起冲突, 但是不在再相同作用域中声明 2 个同名标签或同名变量

    #+begin_src c
      struct rect {
        double x;
        double y;
      };

      int rect; // 在C中不会产生冲突
    #+end_src

    C++ 中不允许这样做, 因为它把标记名和变量名放在相同的名称空间中
    
** ~typedef~ 简介
   ~typedef~ 工具是一个高级数据特性, 利用 ~typedef~ 可以为某一类型定义名称. 这方
   面与 ~#define~ 类似, 但是 2 者有三处不同:

   1. 与 ~#define~ 不同, ~typedef~ 创建的符号名只受限于类型, 不能用于值
   2. ~typedef~ 由 *编译器* 解释, 不是 *预处理器*
   3. 在其受限的范围内, ~typedef~ 比 ~#define~ 更灵活

      
   ~typedef~ 工作原理:
   假设要用 ~BYTE~ 表示 1 字节的数组, 只需像定义个 ~char~ 类型变量一样定义
   ~BYTE~, 然后在定义前面加上关键字 ~typedef~ 即可
   #+begin_src c
     typedef unsigned char BYTE;
   #+end_src
   
   随后, 便可以使用 ~BYTE~ 来定义变量:
   #+begin_src c
     BYTE x, y[10], *z;
   #+end_src
   
   该定义的作用域取决于 ~typedef~ *定义所在的位置*. 如果定义在函数中, 就具有局部
   作用域, 受限于定义所在的函数. 如果定义在函数外面, 就具有文件作用域.

   通常, ~typedef~ 定义中 *用大写字母表示被定义的名称*, 以提醒用户这个类型名实际
   上是一个符号缩写. 名称遵循变量的命名规则

   C 标准规定 ~sizeof~ 和 ~time()~ 返回整数类型, 但是让实现来决定具体是什么类型.
   所以, 标准委员会决定简历一个新的类型名(eg: ~time_t~), 并让实现使用 ~typedef~
   来设置它的数据类型.

   #+begin_src c
     time_t time(time_t*);
   #+end_src
   
   ~time_t~ 在不同系统中的代表类型可能不同, 但是只要包含 ~time.h~ 头文件, 程序就
   你访问合适的定义

   与 ~#define~ 功能重合的部分:
   #+begin_src c
     #define BYTE unsigned char
   #+end_src

   不重合的部分:
   #+begin_src c
     typedef char* STRING;
   #+end_src

   编译器把 ~STRING~ 解释成一个类型的标识符
   #+begin_src c
     STRING name, sign;

     // 与下面等价

     char *name, *sign;
   #+end_src

   当使用 ~#define~ 时:
   #+begin_src c
     #define STRING char*

     STRING name, sign;

     // 将被翻译成:

     char* name, sign;
   #+end_src

   这导致只有 ~name~ 才是指针

   ~typedef~ 还可用于结构:
   #+begin_src c
     typedef struct complex
     {
       float real;
       float image;
     } COMPLEX;
   #+end_src

   使用 ~typedef~ 来命名一个结构类型时, 可以省略该结构的标签:
   #+begin_src c
     typedef struct { double x; double y; } rect;
   #+end_src

   使用 ~typedef~ 给复杂类型命名
   #+begin_src c
     typedef char (*FRPTC()) [5];
   #+end_src
   
   把 ~FRPTC~ 声明为一个函数类型, 该函数返回一个指针, 该指针指向内含 5 个 ~char~
   类型元素的数组

** 其他复杂的声明
   C 允许用户自定义数据形式. 虽然我们常用的是一些简单的形式, 但是根据需要优势还
   会用到一些复杂形式:

   声明时可使用的符号:
   | 符号 | 含义         |
   |------+--------------|
   | \*   | 表示一个指针 |
   | ()   | 表示一个函数 |
   | []   | 表示一个数组 |

   较复杂的声明示例:
   #+begin_src c
     int board[8][8]; // 声明一个内含 int 数组的数组
     int** ptr; // 声明一个指向指针的指针, 被指向的指针指向 int
     int* risks[10]; // 声明一个内含 10 个元素的数组, 每个元素都是一个指向 int 的指针
     int (* rusks)[10]; // 声明一个指向数组的指针, 该数组内含 10 个 int 类型的值
     int* oof[3][4]; // 声明一个 3 * 4 的二维数组, 每个元素都是指向 int 的指针
     int (* uuf)[3][4]; // 声明一个指向 3 * 4 的二维数组的指针, 该数组中内含 int 类型值
   #+end_src

   符号优先级:

   1. 数组名后面的 ~[]~ 和函数名后面的 ~()~ 具有 *相同的优先级*. 它们比 ~*~ (解
      引用运算符)的优先级高. 因此下面的声明为指针数组, 而不是指向数组的指针:
      #+begin_src c
        int *risks[10];
      #+end_src

   2. ~[]~ 和 ~()~ 的优先级相同, 由于都是从左往右结合, 所以下面的声明中, 在应用
      方括号之前, ~*~ 咸鱼 ~rusks~ 结合. 因此 ~rusks~ 是一个指向数组的指针, 内含
      10 个 ~int~ 类型的元素:
      #+begin_src c
        int (*rusks)[10];
      #+end_src

   3. ~[]~ 和 ~()~ 都是 *从左往右结合*. 因此下面的声明是一个由 12 个内含 50 个
      ~int~ 类型值的数组组成的二维数组, 不是一个有 50 个内含 12 个 ~int~ 类型值
      的数组组成的二维数组
      #+begin_src c
        int goods[12][50];
      #+end_src

      把以上的规则应用于下面的声明:
      #+begin_src c
        int* oof[3][4];
      #+end_src
      
      ~[3]~ 比 ~*~ 的优先级高, 由于从左往右结合. 因此, ~oof~ 首先是一个内含 3 个
      元素的数组, 然后在与 ~[4]~ 结合, 所以 ~oof~ 的每个元素都是内含 4 个元素的
      数组, ~*~ 说明这些元素怒都是指针. 最后, ~int~ 表明了这 4 个元素都是指向
      ~int~ 的指针. 编译器要为 12 个指针预留存储空间

      #+begin_src c
        int (*uuf)[3][4];
      #+end_src
      
      圆括号使得 ~*~ 先与 ~uuf~ 结合, 说明 ~uuf~ 是一个指针, 所以 ~uuf~ 是一个指
      向 3 * 4 的 ~int~ 类型二维数组的指针. 编译器要为一个指针预留存储空间

      #+begin_src c
        char* fump(int); // 返回字符指针的函数
        char (*frump)(int); // 指向函数的指针, 该函数的返回类型为 ~char~
        char (* flump[3])(int); // 内含3个指针的数组, 每个指针都指向返回类型为 char 的函数
      #+end_src

      这 3 个函数都接受 ~int~ 类型的参数
      可以使用 ~typedef~ 建立一系列相关类型:
      #+begin_src c
        typedef int arr5[5];
        typedef arr5 *p_arr5;
        typedef p_arr5 arrp10[10];

        arr5 togs; // togs 是一个内含 5 个 int 类型值的数组
        p_arr5 p2; // p2 是一个指向数组的指针, 该数组内含 5 个 int 类型的值
        arrp10 ap; // ap 是一个内含 10 个指针的数组, 每个指针都指向一个内含 5 个 int 类型值的数组
      #+end_src

** 函数和指针
   *可以声明一个指向函数的指针*.
   函数指针常用作另一个函数的参数, 告诉该函数要使用哪一个函数. 例如, 排序数组设
   计比较 2 个元素, 以确定先后. 如果是数字, 可以使用 ~>~ 运算符, 如果是字符串或
   结构, 就要调用函数来进行比较.

   C 库中的 ~qsort()~ 函数可以处理任意类型的数组, 但是要告诉 ~qsort()~ 使用哪个
   函数来比较元素, 为此, ~qsort()~ 函数的参数列表中, 有一个参数 *接受指向函数的
   指针*. 然后, ~qsort()~ 函数使用该函数提供的方案进行排序, 无论数组中的元素是
   整数, 字符串还是结构

   函数也有地址, 指向函数的指针中储存着函数代码的起始处地址.2f.\n
   声明一个数据指针时, 必须声明指针所指向的数据类型. 声明一个函数指针时, *必须声
   明指针指向的函数类型*. 为了指明函数类型, 要指明函数前面, 即函数的返回类型和形
   参类型.

   eg:
   #+begin_src c
     void ToUpper(char*); // 把字符串中的字符转换成大写字符
   #+end_src

   ~ToUpper()~ 函数的类型是 "带 ~char *~"类型参数, 返回类型是 ~void~ 的函数.

   下面声明了一个指针 ~pf~ 指向该函数类型:
   #+begin_src c
     void (*pf)(char*); // pf 是一个指向函数的指针
   #+end_src

   从该声明可以看出, 第 1 对圆括号把 ~*~ 和 ~pf~ 括起来, 表明 ~pf~ 是一个指向函
   数的指针. 因此, ~(\*pf)~ 是一个参数列表为 ~(char\*)~, 返回类型为 ~void~ 的函数.

   如果想声明一个指向某类型函数的指针, 可以写出该函数的原型后把函数名替换成
   ~(\*pf)~ 形式的表达式, 创建函数指针声明. 由于运算符优先级的规则, 在声明函数指
   针时必须把 ~*~ 和指针名括起来., 如果省略第一个圆括号会导致结果完全不同

   #+begin_src c
     void *pf (char*); // pf 是一个返回字符指针的函数
   #+end_src
   
   eg: 指针赋值:
   #+begin_src c
     void ToUpper(char*);
     void ToLower(char*);

     int round(double);
     void (*pf)(char*);

     pf = ToUpper; // 有效, ToUpper 是该类型函数的地址
     pf = ToLower; // 有效, ToLower 是该类型函数的地址
     pf = round; // 无效, round 与指针类型不匹配
     pf = ToLower(); // 无效, ToLower() 不是地址
   #+end_src

   可以用数据指针访问数据, 也可以用函数指针访问函数, 2 种逻辑上不一致的语法可以这
   样做:
   #+begin_src c
     void ToUpper(char*);
     void ToLower(char*);

     void (*pf)(char*);

     char mis[] = "Nina Metier";
     pf = ToUpper;
     (*pf)(mis); // 把 ToUpper 作用余(语法1)
     pf = ToLower;
     pf(mis); // 把 ToLower 作用于(语法 2)
   #+end_src

   这 2 种方法看上去合情合理. 分析:
   1. 由于 ~pf~ 指向 ~ToUpper~ 函数, 那么~*pf~ 就相当于与 ~ToUp~ 函数, 所以
      ~(*pf)(mis)~ 和 ~ToUpper(mis)~ 相同.

   2. 由于函数名是指针, 那么指针和函数名可以互换使用, 所以 ~pf(mis)~ 和
      ~ToUpper(mis)~ 相同. 从 ~pf~ 的 *赋值表达式语句* 就能看出 ~ToUpper~ 和
      ~pf~ 是等价的.

      
   历史原因, 贝尔实验室的 ~C~ 和 ~UNIX~ 开发者采用第一种, 而伯克利的 ~UNIX~ 推广
   者却采用第 2 种, 为了兼容, ANSI C 认为这 2 种形式等价

   函数指针作为函数的参数:
   #+begin_src c
     void show(void (*fp)(char*), char* str);
   #+end_src
   
   调用示例:
   #+begin_src c
     show(ToLower, mis); // show() 使用 ToLower() 函数: fp = ToLower
     show(pf, mis); // show() 使用 pf 指向的函数: fp = pf
   #+end_src
   
   使用实例:
   #+begin_src c
     void show(void (*fp)(char*), char* str)
     {
       (*fp)(str); // 把所选函数作用于 str
       puts(str); // 显示结果
     }
   #+end_src

   eg:  ~func_ptr.c~

   注意: ~ToUpper()~, ~ToLower()~, ~Transpose()~ 和 ~Dummy()~ 函数的类型都相同,
   所以这 4 个函数都可以赋给 ~pfun~ 指针. 

   该情况下可以使用 ~typedef~
   #+begin_src c
     typedef void (*V_FP_CHARP)(char*);
     void show(V_FP_CHARP fp, char*);
   #+end_src

   可以声明并初始化一个函数指针的数组
   #+begin_src c
     V_FP_CHARP aprf[4] = { ToUpper, ToLower, Transpose, Dummy };
   #+end_src

   然后修改 ~showmenu()~ 函数的返回类型为 ~int~

** 关键概念
   程序可能要处理具有多种属性的实体, C 结构可以把相关的信息都储存在一处, 而不是
   分散储存在多个变量中.

   设计结构时, 开发一个与之配套的函数包通常很有用, 一个参数就能获取结构所有信息.
   这在修改结构时很方便

   联合声明与结构声明类似. 但是联合的成员共享相同的存储空间, 而且 *在联合中同一
   时间只能有一个成员*. 实际上, 可以在联合变量中储存一个 *类型不唯一* 的值

   ~enum~ 工具提供一种定义符号常量的方法, ~typedef~ 工具提供一种为基本或派生类型
   创建新标识符的方法

   指向函数的指针提供一种高速函数应使用哪一个函数的方法.

** 本章小结
   C 结构提供在相同的数据对象中储存多个不同类型的数据项的方法. 可以使用标记来标
   识一个具体的结构模板, 并声明该类型的变量. 通过成员点运算符 ~.~ 可以使用结构模
   板中的标签来访问结构的各个成员.

   如果有一个指向结构的指针, 可以用该指针和间接成员运算符 ~->~ 代替结构名和点运
   算符来访问结构的各成员. 和数组不同, *结构名不是结构的地址*, 要在结构名前使用
   ~&~ 运算符才能获得结构的地址

   一贯以来, 与结构相关的函数都使用指向结构的指针作为参数. 现在的 C 允许把结构作
   为参数传递, 作为返回值和同类型结构之间赋值. 但传递结构的地址通常更有效.

   联合使用与结构相同的语法. 然而, 联合的成员共享一个共同的存储空间. 
   联合同一时间内只能储存一个单独的数据项, 不像结构那样同时储存多种数据类型. 

   通过枚举可以创建一系列代表整型常量(枚举常量)的符号和定义相关的枚举类型.

   ~typedef~ 工具可用于建立 ~C~ 标准类型的别名或缩写.

   函数名代表函数的地址, 可以把函数的地址作为参数传递给其他函数, 然后这些函数就
   可以使用被指向的函数. 如果把特定函数的地址赋给一个名为 ~pf~ 的函数指针, 可以
   通过以下 2 种方式调用该函数

   #+begin_src c
     double (*pdf)(double);

     (*pdf) (1.2);
     pdf(1.2);
   #+end_src
   
** 复习题
   1. 缺少分号, 见 ~res1.c~
   2. 输出: 
      "6 1", "22 Spiffo Road", "S p" 见 ~res2.c~
   3. 见 ~res3.c~
   4. 见 ~res4.c~
   5. 见 ~res5.c~
   6. 解答:
      a. 见 ~res6.c~
      b. 见 ~res7.c~
   7. 解答:
      a. 见 ~res8.c~
      b. 见 ~res9.c~
      c. 见 ~res10.c~
   8. 见 ~res11.c~
   9. 见 ~res12.c~
   10. 见 ~res13.c~
   11. 见 ~res14.c~
   12. 见 ~res15.c~
   13. 见 ~res16.c~

** 编程练习
   1. 见 ~practice1.c~
   2. 见 ~practice2.c~
   3. 见 ~practice3.c~
   4. 见 ~practice4.c~
   5. 见 ~practice5.c~
   6. 见 ~practice6.c~
   7. 见 ~practice7.c~
   8. 见 ~practice8.c~
   9. 见 ~practice9.c~
   10. 见 ~practice10.c~
   11. 见 ~practice11.c~
