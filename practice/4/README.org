* 第 4 章 字符串格式化输入/输出

** 前导程序
   - 宏: #define
   - char[]数组使用 scanf 赋值不需要使用 *&* 符号

** 字符串简介
   字符串是一个或多个的字符序列, 用双引号而不是单引号告知编译器为字符串

*** char 类型数组和 null 字符
    C 语言没有专门用于存储字符串的变量类型, 字符串都在 char 类型的数组中.

    数组由连续的存储单位组成, 字符串中的字符被储存在相邻的存储单元中, 每个单元存
    储一个字符

    *注意* : 数组末尾位置的字符 ~\0~ 是空字符(null character), 标记着字符串的结
    束, 空字符不是数字 0 , 是非打印字符, ASCⅡ等价于 0. C 中的字符串 *一定以空字符结
    束* , 所以数组长度要留存 1 项, 40 的数组长度只能存储 39 个单元的字符串

*** 使用字符串
    - scanf()遇到空格不再读取输入(可用 fgets()代替)
    - 字符串和字符不相同
      + 'x' 存储空间: x
      + "x" 存储空间: x , \0

*** strlen()函数
    printf 函数使用 ~%zd~ 来输出
    - strlen(): 读取字符串长度(忽略 ~\0~)
    - sizeof: 读取内存占用空间

** 常量和 C 预处理器
   宏常量:
   - 格式: #define NAME value
   - 生效时间: 编译时替换(预处理)
   - 命名规范: NAME 全大写

     *注意*:(代码见 ~pizza.c~)
      在 printf 中: %n: n 表示占用位数(输出长度, 空格补全前缀), 实际输出若大于占用位数, 以实际输出为准

*** const 限定符
    const 关键字, 限定一个变量为只读
    例: ~const int MONTHS = 12;~

*** 明示常量
    - limits.h: INT_MAX 和 INT_MIN 明示常量表示 int 类型的最大值和最小值, 如果系统使
      用 32 位的 int, 该头文件会为这些明示常量提供不同的值
      
      明示常量表
      | 明示常量   | 含义                           |
      |------------+--------------------------------|
      | CHAR_BIT   | char 类型的位数                 |
      | CHAR_MAX   | char 类型的最大值               |
      | CHAR_MIN   | char 类型的最小值               |
      | SCHAR_MAX  | signed char 类型的最大值        |
      | SCHAR_MIN  | signed char 类型的最小值        |
      | UCHAR_MAX  | unsigned char 类型的最大值      |
      | SHRT_MAX   | short 类型的最大值              |
      | SHRT_MIN   | short 类型的最小值              |
      | USHRT_MAX  | unsigned short 类型的最大值     |
      | INT_MAX    | int 类型的最大值                |
      | INT_MIN    | int 类型的最小值                |
      | UINT_MAX   | unsigned int 的最大值           |
      | LONG_MAX   | long 类型的最大值               |
      | LONG_MIN   | long 类型的最小值               |
      | ULONG_MAX  | unsigned long 类型的最大值      |
      | LLONG_MAX  | long long 类型的最大值          |
      | LLONG_MIN  | long long 类型的最小值          |
      | ULLONG_MAX | unsigned long long 类型的最大值 |
    - float.h
      明示常量表
      | 明示常量       | 含义                                            |
      |----------------+-------------------------------------------------|
      | FLT_MANT_DIG   | float 类型的尾数位数                             |
      | FLT_DIG        | float 类型的最少有效数字位数(十进制)             |
      | FLT_MIN_10_EXP | 带全部有效数字的 float 类型的最小负指数(以 10 为底) |
      | FLT_MAX_10_EXP | float 类型的最大正指数(以 10 为底)                 |
      | FLT_MIN        | 保留全部精度的 float 类型最小正数                 |
      | FLT_MAX        | float 类型的最大正数                             |
      | FLT_EPSILON    | 1.00 和比 1.00 大的最小 float 类型值之间的差值       |

** printf()和 scanf()
   
*** printf()函数
    转换说明表
    | 转化说明 | 输出                                                            |
    |----------+-----------------------------------------------------------------|
    | %a       | 浮点数, 十六进制和 p 计数法(C99/C11)                              |
    | %A       | 浮点数, 十六进制和 p 计数法(C99/C11)                              |
    | %c       | 单个字符                                                        |
    | %d       | 有符号十进制整数                                                |
    | %e       | 浮点数, e 计数法                                                 |
    | %E       | 浮点数, e 计数法                                                 |
    | %f       | 浮点数, 十进制计数法                                            |
    | %g       | 根据值得不同, 自动选择%f 或%e. %e 格式用于指数 < -4 或者 >= 精度时 |
    | %G       | 根据值得不同, 自动选择%f 或%e. %e 格式用于指数 < -4 或者 >= 精度时 |
    | %i       | 有符号十进制整数(与%d 相同)                                      |
    | %o       | 无符号八进制整数                                                |
    | %p       | 指针                                                            |
    | %s       | 字符串                                                          |
    | %u       | 无符号十进制整数                                                |
    | %x       | 无符号十六进制整数, 使用十六进制数 0f                            |
    | %X       | 无符号十六进制整数, 使用十六进制数 0F                            |
    | %%       | 打印一个百分号                                                  |

*** 使用 printf()
    printf 使用的是值, 不论是变量, 常量 还是表达式的值

*** printf()的转换说明修饰符
    | 修饰符 | 含义                                                                                  |
    |--------+---------------------------------------------------------------------------------------|
    | 标记   | 表 4.5 描述了 5 种标记(-, +, 空格, #和 0), 可以不使用标记或使用多个标记                    |
    |        | 示例: "%-10d"                                                                         |
    |--------+---------------------------------------------------------------------------------------|
    | 数字   | 最小字段宽度                                                                          |
    |        | 如果该字段不能容纳待打印的数字或字符串, 系统会使用更宽的字段                          |
    |        | 示例: "%4d"                                                                           |
    |--------+---------------------------------------------------------------------------------------|
    | .数字  | 精度                                                                                  |
    |        | 对于%e, %E 和%f 转换, 表示小数点右边数字的位数                                          |
    |        | 对于%g 和%G 转换, 表示有效数字最大位数                                                  |
    |        | 对于%s 转换, 表示待打印字符的最大数量                                                  |
    |        | 对于整型转换, 表示待打印的数字的最小位数                                              |
    |        | 如有必要, 使用前导 0 来达到这个位数                                                     |
    |        | 只使用.表示其后跟随一个 0, 所有%.f 和%.0f 相同                                           |
    |        | 示例: "%5.2f"打印一个浮点数, 字段宽度为 5 字符, 其中小数点后有 2 位数字                   |
    |--------+---------------------------------------------------------------------------------------|
    | h      | 和整型转换说明一起使用, 表示 short int 或 unsigned short int 类型的值                  |
    |        | 示例: "%hu", "%hx", "%6.4hd"                                                          |
    |--------+---------------------------------------------------------------------------------------|
    | hh     | 和整型转换说明一起使用, 表示 signed char 或 unsigned char 类型的值                     |
    |        | 示例: "%hhu", "%hhx", "%6.4hhd"                                                       |
    |--------+---------------------------------------------------------------------------------------|
    | j      | 和整型转换说明一起使用, 表示 intmax_t 或 uintmax_t 类型的值. 这些类型定义在 stdint.h 中 |
    |        | 示例: "%jd", "%8jx"                                                                   |
    |--------+---------------------------------------------------------------------------------------|
    | l      | 和整型转换说明一起使用, 表示 long int 或 unsigned long int 类型的值                   |
    |        | 示例: "%ld", "%8lu"                                                                   |
    |--------+---------------------------------------------------------------------------------------|
    | ll     | 和整型转换说明一起使用, 表示 long long int 或 unsigned long long int 类型的值(C99)    |
    |        | 示例: "%lld", "%8llu"                                                                 |
    |--------+---------------------------------------------------------------------------------------|
    | L      | 和浮点转换说明一起使用, 表示 long double 类型的值                                     |
    |        | 示例: "%Ld", "%10.4Le"                                                                |
    |--------+---------------------------------------------------------------------------------------|
    | t      | 和整型转换说明一起使用, 表示 ptrdff_t 类型的值. ptrdiff_t 是两个指针差值的类型(C99)      |
    |        | 示例: "%td", "%l2ti"                                                                  |
    |--------+---------------------------------------------------------------------------------------|
    | z      | 和整型转换说明一起使用, 表示 size_t 类型的值. size_t 是 sizeof 返回的类型(C99)             |
    |        | 示例: "%zd", "%l2zd"                                                                  |

    *注意*: 类型可移植性
    sizeof 以字节为单位返回类型或值得大小 -- 应该是某种形式的整数, 但标准只规定
    了该值是无符号整数. 在不同实现中不同

    - 使用 stddef.h 头文件(在包含 stdio.h 头文件时已包含在其中): 
      + 把 size_t 定义成系
        统使用 sizeof 返回的类型, 这被称为底层类型.
      + printf()使用 z 修饰符表示打印响应的类型
      + ptrdiff_t 类型和 t 修饰符来表示系统使用的 2 个地址差值的底层有符号整数类型
    
    *注意*: float 参数的转换
    对于浮点类型, 有用于 double 和 long  double 的类型转换说明, 确没有 float 类的. 因
    为表达式或参数中的 float 类型值会被自动转换成 double 类型
    - ANSI 中 C 不会把 float 自动转换成 double
    - printf 仍自动转换 float 为 double 类型

      printf 中的标记
      | 标记 | 含义                                                                                                      |
      |------+-----------------------------------------------------------------------------------------------------------|
      | -    | 待打印项左对齐, 即, 总字段的左侧开始打印该项                                                              |
      |      | 示例: "%-20s"                                                                                             |
      |------+-----------------------------------------------------------------------------------------------------------|
      | +    | 有符号值若为正, 则在前面显示加号; 若为负, 则在值前面显示减号                                              |
      |      | 示例: "%+6.2f"                                                                                            |
      |------+-----------------------------------------------------------------------------------------------------------|
      | 空格 | 有符号值若为正, 则在前面显示前导空格(不显示任何符号); 若为符, 则在值前面显示减号+标记覆盖一个空格         |
      |      | 示例: "%6.2f"                                                                                             |
      |------+-----------------------------------------------------------------------------------------------------------|
      | #    | 把结果转换为另一种形式.                                                                                   |
      |      | 如果是%o 格式, 则以 0 开始                                                                                   |
      |      | 如果是%x 或%X 格式, 则以 0x 或 0X 开始                                                                          |
      |      | 对于所有的浮点格式, #保证了即使后面没有任何数字, 也打印一个小数点字符. 对于%g 和%G 格式, #防止后面的 0 被删除 |
      |      | 示例: "%#o", "%#8.0f", "%+#10.3e"                                                                         |
      |------+-----------------------------------------------------------------------------------------------------------|
      | 0    | 对于数值格式, 用前导 0 代替空格填充字符宽度, 对于整数格式, 如果出现-标记或指定精度, 则忽略该标记            |

*** 转换说明的意义
    1. printf 错误使用:
       1. 使用 %c 打印 short: short 类型转为 char, char 会读取后 1 字节(二进制 8 位)
       2. 使用 %hd 打印 int: int 类型转为 short, short 会读取后 2 字节(二进制 16 位)
       3. 使用错误浮点参数时:
          + 使用多个%ld 读取 float/double 类型, 每次读取 *栈* 中的字节数, 所以会导致 2
            个 %ld 实际读取的是 2 个 float 拆分成 2 部分的字节

    2. printf()返回值:(旧版会返回不同的值)负值为输出错误

    3. printf 换行输出
       1) 使用多个 printf
       2) 用\和 Enter 键组合换行(在双引号中)
       3) 字符串拆分(ANSI C 特性)

*** 使用 scanf()
    转换说明表
    | 转换说明       | 含义                                                                                              |
    |----------------+---------------------------------------------------------------------------------------------------|
    | %c             | 把输入解释成字符                                                                                  |
    | %d             | 把输入解释成有符号十进制整数                                                                      |
    | %e, %f, %g, %a | 把输入解释称浮点数(C99 标准新增了%a)                                                               |
    | %E, %F, %G, %A | 把输入解释成浮点数(C99 标准新增了%A)                                                               |
    | %i             | 把输入解释成有符号十进制整数                                                                      |
    | %o             | 把输入解释成有符号八进制整数                                                                      |
    | %p             | 把输入解释成指针(地址)                                                                            |
    | %s             | 把输入解释成字符串. 从第 1 个非空白字符开始(依旧读取换行符), 到下一个空白字符之前的所有字符都是输入 |
    | %u             | 把输入解释成无符号十进制整数                                                                      |
    | %x, %X         | 把输入解释成有符号十六进制整数                                                                                   |

    修饰符
    | 转换说明  | 含义                                                                            |
    |-----------+---------------------------------------------------------------------------------|
    | *         | 抑制赋值                                                                        |
    |           | 示例: "%*d"                                                                     |
    |-----------+---------------------------------------------------------------------------------|
    | 数字      | 最大字符宽度. 输入达到最大字符宽度处, 或第一次遇到空白字符时停止                |
    |           | 示例: "%10s"                                                                    |
    |-----------+---------------------------------------------------------------------------------|
    | hh        | 把整数作为 signed char 或 unsigned char 类型读取                                |
    |           | 示例: "%hhd", "%hhu"                                                            |
    |-----------+---------------------------------------------------------------------------------|
    | ll        | 把整数作为 long long 或 unsigned long long 类型读取(C99)                         |
    |           | 示例: "%lld", "%llu"                                                            |
    |-----------+---------------------------------------------------------------------------------|
    | h, l 或 L | "%hd"和"%hi"表明把对应的值存储为 short int 类型                                 |
    |           | "%ho", "%hx"和"%hu"不爱你不过把对应的值存储为 unsigned short int 类型           |
    |           | "%ld"和"%li"表明把对应的值存储为 long 类型                                        |
    |           | "%lo","%lx"和"%lu"表明把对应的值存储为 unsigned long 类型                       |
    |           | "%le", "%lf"和"%lg"表明把对应的值存储为 double 类型                             |
    |           | 在 e, f 和 g 前面使用 L 而不是 l, 表明把对应的值被存储为 long double 类型            |
    |           | 如果没有修饰符, d, i, o 和 x 表明对应的值被储存为 int 类型, f 和 g 表明为 float 类型 |
    |-----------+---------------------------------------------------------------------------------|
    | j         | 在整型转换说明后面时, 表明使用 intmax_t 或 uintmax_t 类型(C99)                      |
    |           | 示例: "%zd", "%zo"                                                              |
    |-----------+---------------------------------------------------------------------------------|
    | z         | 在整型转换说明后面时, 表明使用 sizeof 的返回类型(C99)                             |
    | t         | 在整型转换说明后面时, 表明使用表示 2 个指针差值的类型(C99)                        |
    |           | 示例: "%td", "%tx"                                                                  |


    1. 从 scanf() 角度看输入
       - 跳过所有的空白字符, 直至遇到第一个非空白字符才开始读取
       - 读到非所需类型的字符停止, 截取已读的字符, 反复此步骤
       - 赋值已读字符给变量
         + 赋值错误立刻停止
         + 针对字符串, 会赋值同时附上'\0'
    
    2. 格式字符串的普通字符
       - scanf 会严格匹配
         #+begin_src c
           // 严格匹配, 用户输入 1个数字, 一个逗号, 一个数字(会自动跳过整数前面的空白)
           scanf("%d,%d", &n, &m);

           // 88,121

           // 自动跳过空白, 可识别
           // 88, 121

           // 自动跳过空白, 可识别
           // 88,
           // 121
         #+end_src

       - 针对%c 不会跳过空白
         #+begin_src c
           char ch;

           scanf("%c", &ch); // 从输入的第一个字符开始读取;

           scanf(" %c", &ch); // 从输入的第一个非空白字符开始读取;
         #+end_src

       - 返回值
         1) 如果没有读取任何项, 且需要读取一个数字而用户确输入一个非数值字符串,
            返回 0

         2) 检测到文件结尾时: 会返回 EOF(由于 EOF 在 stdio.h 中定义为-1(通常))

*** printf()和 scanf()的*修饰符
    - printf()中*: 字符宽度(见 ~varwid.c~)
      在%与转换说明字符中使用: ~%*.*f~
    
    - scanf()中*: 跳过该字符(见 ~skip2.c~)
      使用场景: 在读取文件中特定列的内容时
      #+begin_src c
        int n;

        // 跳过2项赋值第三项
        scanf("%*d %*d %d", &n);
      #+end_src

*** printf()的用法提示
    - 想把数据打印成列, 可指定足够大的字段宽度
      #+begin_src c
        // 原始数据
        printf("%d %d %d\n", val1, val2, val3);

        // 列数据
        printf("%9d %9d %9d\n", val1, val2, val2);
      #+end_src

    - 数字本地化设置
      见 locale.h 主要用于表示小数点符号
    
      
** 关键概念
   - 字符串永远都有'\0'字符作为结尾
   - 建议使用 ~#define~ 定义数值常量, 用 const 关键字声明的变量为只读变量, 在程
     序中使用符号常量(明示常量), 提高可读性和可维护性
   - scanf()会严格匹配, 记得何时使用&
   - 空白字符对于 scanf()很关键
     假设 scanf()中用户输入的值是
     ~\ 13.45e12# 0~ (\ 代表空格)
     + 使用%d 的结果: -13
     + 使用%f 的结果: -13.45e12
     + 使用%s 的结果: -1345e12#
     + 使用%c 的结果: (空格)

** 本章小结
   - 字符串在 C 中是以'\0'结尾的额字符数组

** 复习题

1. ~scanf("%s")~ 仅读取一个单词

2. 见 ~res2.c~

3. 见 ~res2.c~

4. 错误列表:
   1) 缺少 ~#include <stdio.h>~
   2) ~define B booboo~ -> ~#define B "booboo"~
   3) ~main(int)~ -> ~int main()~
   4) ~char name;~ -> ~char name[40];~
   5) ~printf("All right, %c, what's your age?\n", name, age)~ // 缺少参数 age
   6) 没有声明 xp: ~int xp;~

5. 见 ~res3.c~

6. a: ~%d~ (见 ~res4.c~)
   b: ~%4X~
   c: ~%10.3f~
   d\: ~%.2e~
   e: ~%-30s~

7. a: ~%15ld~ (见 ~res5.c~)
   b: ~%#x~
   c: ~%-12.2e~
   d\: ~%+10.3f~
   e: ~%-7.5s~

8. a: ~%6.4d~ (见 ~res6.c~)
   b: ~%#*.*o~
   c: ~%2s~
   d:\ TODO: ~%f~
   e: ~%-7.5s~

9. a: ~%d~ (见 ~res7.c~)
   b: ~%f %f~
   c: ~\ %s~
   d\: ~\ %s %d~
   e: ~\ %*s %d~

10. 空白字符对 scanf 很关键, 是区分读取值得界限

11. %z -> %zd (见 ~../3/typesize.c~)

12. 不行, 编译出错: 见 ~res8.c~;

** 编程练习

1. 见 ~practice1.c~

2. 见 ~practice2.c~

3. 见 ~practice3.c~

4. 见 ~practice4.c~

5. 见 ~practice5.c~

6. 见 ~practice6.c~

7. 见 ~practice7.c~

8. 见 ~practice8.c~
