* 第 5 章 运算符、表达式和语句

** 基本运算符
   - 使用 pow()等数学函数记得#include <math.h>

*** 赋值运算符: =
    - 格式:
    i = i + 1;
    左值(不能是常量) 赋值运算符 右值

    - 数据对象(data object): 用于储存值得数据存储区域(统称)
      + C *仅有* 在提到这个概念时才会用到对象这个术语
      + 使用对象名是标识对象的一种方法
        * 其他方式: 指定数组元素, 结构成员
    - 左值: 用于标识特定数据对象的名称或表达式
    - 右值: 能赋值给可修改左值的量
      表达式内都是临时值, 计算完成后便会被丢弃


    旧版提到左值的操作:
    1. 指定一个对象, 引用内存中的地址
    2. 可用在赋值运算符的左侧, 左值(lvalue)中的 l 源自 left

    新版增加了 const 限定符, 提到左值的操作步骤 2 为: 可修改的左值

*** 减法运算符: -
    +和-运算符都被称为二元运算符(binary operator), 需要 2 个运算对象才能完成操作

*** 符号运算符: -和+
    - ~36-12~: 2 个运算对象(二元)
    - ~-16~: 一个运算对象(一元)
    - ~-(12-20)~: 一个运算对象+两个运算对象(一元二元皆有)

*** 除法运算符
    整数除法结果的小数部分被 *丢弃*, 这一过程被称为截断(truncation)

    趋零截断, -3.8 截断为-3

*** 运算符优先级
    1. 执行()内部分
    2. 计算表达式中的 * 或 /
    3. 计算表达式中的 + 或 -

       
    优先级表:
    | 运算符     | 结合律   |
    |------------+----------|
    | ()         | 从左往右 |
    | + - (一元) | 从右往左 |
    | * /        | 从左往右 |
    | + - (二元) | 从左往右 |
    | =          | 从右往左 |

*** 优先级和求值顺序
    例: 
    #+begin_src c
      int y = 6 * 12 + 5 * 20;
    #+end_src
    先进行乘法运算, 后进行加法运算
    但优先级 *未规定* 先进行哪一个乘法, 交给语言的实现者执行

** 其他运算符

*** sizeof 运算符和 size_t 类型
    为类型创建别名
    #+begin_src c
      typedef dobule real;
      real deal; // double类型
    #+end_src

    printf 打印显示 size_t 类型的值: %zd(C99), %u 或%lu

*** 求模运算符
    C99 标准规定只要 ~a%b~ 中 a 和 b 都是整数值, 便可通过 ~a ~ (a/b) * b~ 来计算
    ~a%b~

*** 优先级
    递增递减运算符优先级仅次于圆括号()
    ~x*y~ 表达的是 ~(x)*(y++)~

*** 不要自作聪明
    ~y = n++ + n++;~
    仅保证语句执行后, n += 2, y 的值不确定, 根据编译器不同结果不同

    运算守则:
    1. 如果一个变量出现在一个函数的多个参数中, 不要对该变量使用递增/递减运算符
    2. 如果一个变量出现在一个函数的多个表达式中, 不要对该变量使用递增/递减运算符

** 表达式和语句
   
*** 表达式
    表达式(expression): 由运算符和运算对象组成(运算对象是运算操作符的对象)

    C 表达式重要特性: *每个表达式都有一个值*

    示例表达式对应值表
    | 表达式          | 值 |
    |-----------------+----|
    | -4 + 6          |  2 |
    | c = 3 + 8       | 11 |
    | 5 > 3           |  1 |
    | 6 + (c = 3 + 8) | 17 |

*** 语句
    语句(statement)是 C 程序的基本构建块, 一条语句相当于一条完成的计算机指令

    空语句: 
    #+begin_src c
      ; // 空语句
    #+end_src
   
    *注意*:
    1. 声明不是表达式语句, 也没有值
    2. 函数表达式语句会引起函数调用

       
    副作用和序列点

    1. 副作用(side effect): 对数据对象或文件的修改
       - 示例: ~states = 50;~
       - 调用 printf()函数时, 显示的信息其实是副作用(printf()的返回值是待显示字符的个数)
    
    2. 序列点(sequence point): 是程序执行的点, 在该点上, 所有的副作用都在进入下
       一步之前发生
       语句中的分号标记了一个序列点:
       
       在一个语句中, 赋值运算符, 递增运算符和递减运算符对运算对象做的改变必须在
       程序执行下一条语句之前完成

    3. 完成表达式(full expression): 指这个表达式不是被另一个更大表达式的子表达式

       
    聚合示例:
    #+begin_src c
      // 先比较, 后递增
      while (guests++ < 10) // 完整表达式 -- 是while循环的测试条件, 该表达式结束就是一个序列点
          printf("%d \n", guests); // 执行printf之前已经递增
    #+end_src
       
*** 复合语句(块)
    由花括号括起来的一条或多条语句组成
   
** 类型转换
   类型转换规则:
   1. 当类型转换出现在表达式时, 无论是 unsigned 还是 singed 的 char 和 short 都会被自动
      转换成 int. 有必要会被转换成 unsigned int(若 short 与 int 大小相同, unsigned
      short 就比 int 大. 这种情况下, unsigned short 会被转换成 unsigned int)
      早期(K&R 时代)的 C 中, float 会被自动转换成 double
      由于都是从较小类型转换为较大类型, 所以这些转换被称为升级(promotion)
   
   2. 涉及 2 种类型的运算, 2 个值会被分别转换成 2 种类型的更高级别

   3. 类型的级别从高到低一次是 long double, double, float, unsigned long long,
      long long, unsigned long, long, unsigned int, int.
      当 long 和 int 的大小相同时, unsigned int 比 long 的级别高
      short 和 char 类型已经被升级到 int 或 unsigned int

   4. 在赋值表达式语句中, 计算的最终结果会被转换成被赋值变量的类型, 该过程可能导
      致类型升级/降级(demotion)

   5. 当作为函数参数传递时, char 喝 short 被转换成 int, float 被转换成 double.
      第 9 章中, 函数原型会覆盖自动升级

      
   当待转换的值与目标类型不匹配时的规则:
   1. 目标类型是无符号类型, 且待赋的值是整数时, 额外的位将被忽略
      例: 如果目标类型是 8 位 unsigned char, 待赋的值是原始值求模 256
   
   2. 如果目标类型是一个有符号类型, 且待赋的值是整数时, 结果因实现而异

   3. 如果目标类型是一个整型, 且待赋的值是浮点数, 该行为未定义

*** 强制类型转换符
    (type)
    例:
    #+begin_src c
      mice = (int)1.6 + (int)1.7;
    #+end_src
    运算符图:
    | 赋值运算符 | 说明                                                                                 |
    |------------+--------------------------------------------------------------------------------------|
    | =          | 将其右侧的值赋给左侧的变量                                                           |
    |------------+--------------------------------------------------------------------------------------|
    | 算术运算符 | 说明                                                                                 |
    | +          | 将其左侧的值与右侧的值相加                                                           |
    | -          | 将其左侧的值减去右侧的值                                                             |
    | -          | 作为一元运算符, 改变其右侧值的符号                                                   |
    | *          | 将其左侧的值乘以右侧的值                                                             |
    | //         | 将其左侧的值除以右侧的值                                                             |
    | %          | 当其左侧的值除以右侧的值时, 取其余数(只能应用于整数)                                 |
    | ++         | 对其右侧的值加 1(前缀模式), 或对齐左侧的值加 1(后缀模式)                               |
    | --         | 对其右侧的值减 1(前缀模式), 或对齐左侧的值减 1(后缀模式)                               |
    |------------+--------------------------------------------------------------------------------------|
    | 其他运算符 | 说明                                                                                 |
    | sizeof     | 获得其右侧运算对象的大小(以字节为单位), 运算对象可以是一个被圆括号括起来的类型说明符 |
    |            | 如 sizeof(float), 或者是一个具体的变量名, 数组名等, 如 sizeof foo                      |
    | (类型名)   | 强制类型转换, (float) 9 = 9.00                                                              |

** 带参数的函数

    *形参*: 声明参数就创建了, 被称为形式参数(formal argement 或 formal
    parameter)
    - C99 标准规定为 parameter
    *实参*: 函数调用传递的值为实际参数(actual parameter)
    - C99 标准规定为 argements
    在 ~pound.c~ 中, 函数调用 pound(10) 把实际参数 10 传递给函数, 然后该函数把
    *10 赋给形式参数(变量 n).
    main()中的变量 times 的值被拷贝给 pound()中的新变量 n

    诸如 ~void pound(int n);~ 这样的代码是 *函数原型*, 描述了函数的返回值和参数
    - 通过 void 关键字知道该函数没有返回值
    - 通过 int n 知道该函数有一个 int 类型的参数(避免了 float 转换异常问题)

      
    旧版 C:(ANSI 之前), 使用 *函数声明*, 而不是函数原型
    #+begin_src c
      void pound(); // ANSI C 之前的函数声明
    #+end_src
    当参数为 char 和 short 类型时成功: 会自动升级为 int 类型.
    当调用 pound(f)时会失败, 因为缺少函数原型, float 会被自动升级为 double, 程序仍
    可运行, 但结果不正确, 使用如下代码可修复:
    #+begin_src c
      pound((int) f); // 把f强制转换为正确的类型
    #+end_src

** 本章小结
   - 表达式由运算符和运算对象组成
   - 花括号括起来的一条或多条语句构成了复合语句(或称为块), while 语句是一种迭代语
     句
   - C 语言会自动类型转换:
     - char 和 short 类型出现在表达式里作为参数(函数原型除外)时, 都会被升级为 int 类型
     - float 类型类型出现在表达式里作为参数(函数原型除外), 会升级为 double 类型
     - 在 K&R C(非 ANSI C)下, 表达式中的 float 也会升级为 double 类型

** 复习题
   1. a: 30(见 ~res1.c~)
      b: 27
      c: 1, 1
      d:\ 3, 9
   
   2. a: 6(见 ~res2.c~)
      b: 52
      c: 0
      d:\ 13

   3. a: 37.5(见 ~res3.c~)
      b: 1.5
      c: 1.5
      d:\ 1.5
      e: 37.5
      f: 35

   4. 列表:
      - ~int i = 1,~ 逗号应换成分号

   5. 待优化:
      1) 第一次进入 while 判断条件时, sec 并未初始化
      2) scanf 输出 0 时, 还是 printf 打印了出来
   
   6. 输出:(见 ~res4.c~)
      #+begin_src text
        %s! C is  cool!
        ! C is  cool!
        11
        11
        12
        11
      #+end_src

   7. 输出:(见 ~res5.c~)
      #+begin_src text
        SOS:4 4.00
      #+end_src

   8. 输出:(见 ~res6.c~)
      #+begin_src text
           1    2    3    4    5    6    7    8    9   10
      #+end_src

   9. 见 ~res6.c~

   10. 输出:(见 ~res7.c~)
       #+begin_src text
            1   2
          101
          102
          103
          104
         stuvw
       #+end_src

   11. 输出:(见 ~res8.c~)
       #+begin_src text
         死循环如下内容:
         COMPUTER BYTES DOG
       #+end_src

   12. 见 ~res9.c~

   13. 见 ~res10.c~

** 编程练习
   1. 见 ~practice1.c~
   2. 见 ~practice2.c~
   3. 见 ~practice3.c~
   4. 见 ~practice4.c~
   5. 见 ~practice5.c~
   6. 见 ~practice6.c~
   7. 见 ~practice7.c~
   8. 见 ~practice8.c~
   9. 见 ~practive9.c~
